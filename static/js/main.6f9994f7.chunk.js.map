{"version":3,"sources":["components/common/Responsive.js","lib/styles/palette.js","components/common/Button.js","components/common/Header.js","lib/api/client.js","lib/api/auth.js","modules/loading.js","lib/createRequestSaga.js","modules/user.js","containers/common/HeaderContainer.js","components/common/SubInfo.js","components/common/Tags.js","components/posts/PostList.js","modules/posts.js","lib/api/posts.js","containers/posts/PostListContainer.js","components/posts/Pagination.js","containers/posts/PaginationContainer.js","components/auth/AuthTemplate.js","modules/auth.js","components/auth/AuthForm.js","containers/auth/LoginForm.js","pages/auth/LoginPage.js","containers/auth/RegisterForm.js","pages/auth/RegisterPage.js","components/write/Editor.js","modules/write.js","containers/write/EditorContainer.js","components/write/TagBox.js","containers/write/TagBoxContainer.js","components/write/WriteActionButtons.js","containers/write/WriteActionButtonsContainer.js","pages/post/WritePage.js","modules/post.js","components/post/PostViewer.js","components/common/AskModal.js","components/post/AskRemoveModal.js","components/post/PostActionButtons.js","assets/invoice.png","containers/post/PostViewerContainer.js","components/customers/CustomerInvoice.js","components/customers/CustomerList.js","modules/customers.js","lib/api/customers.js","containers/customers/CustomerListContainer.js","components/customers/Pagination.js","containers/customers/PaginationContainer.js","pages/customer/CustomerListPage.js","components/register/Editor.js","modules/register.js","containers/register/EditorContainer.js","components/register/TagBox.js","containers/register/TagBoxContainer.js","components/register/WriteActionButtons.js","containers/register/WriteActionButtonsContainer.js","pages/customer/CustomerRegisterPage.js","modules/customer.js","components/customer/CustomerViewer.js","components/customer/AskRemoveModal.js","components/customer/CustomerActionButtons.js","containers/customer/CustomerViewerContainer.js","pages/customer/CustomerPage.js","App.js","serviceWorker.js","modules/index.js","index.js"],"names":["ResponsiveBlock","styled","div","Responsive","children","rest","palette","gray","cyan","magenta","buttonStyle","css","props","fullWidth","StyledButton","button","StyledLink","Link","Button","to","HeaderBlock","Wrapper","Spacer","UserInfo","Header","user","onLogout","className","username","onClick","client","axios","create","logout","post","START_LOADING","FINISH_LOADING","startLoading","createAction","requestType","finishLoading","loading","handleActions","state","action","payload","createRequestActionTypes","type","createRequestSaga","request","SUCCESS","FAILURE","put","call","response","data","meta","error","logoutSaga","userSaga","TEMP_SET_USER","CHECK","CHECK_SUCCESS","CHECK_FAILURE","LOGOUT","tempSetUser","check","checkSaga","get","checkFailureSaga","localStorage","removeItem","e","console","log","authAPI","takeLatest","checkError","HeaderContainer","useSelector","dispatch","useDispatch","SubInfoBlock","hasMarginTop","SubInfo","publishedDate","Date","toLocaleDateString","TagsBlock","Tags","tags","map","tag","key","PostListBlock","WritePostButtonWrapper","PostItemBlock","PostItem","title","body","_id","PostList","posts","showWriteButton","postsSaga","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","page","listPostsSaga","queryString","qs","stringify","lastPage","parseInt","headers","withRouter","location","match","useEffect","params","parse","search","ignoreQueryPrefix","PaginationBlock","PageNumber","buildLink","query","Pagination","disabled","undefined","AuthTemplateBlock","WhiteBox","AuthTemplate","authSaga","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","value","initializeForm","register","password","login","registerSaga","loginSaga","initialState","passwordConfirm","auth","authError","produce","draft","AuthFormBlock","StyledInput","input","Footer","ButtonWithMarginTop","textMap","ErrorMessage","AuthForm","onChange","onSubmit","text","autoComplete","name","placeholder","style","marginTop","history","useState","setError","push","setItem","JSON","target","preventDefault","LoginPage","status","includes","RegisterPage","EditorBlock","TitleInput","QuillWrapper","Editor","onChangeField","quillElement","useRef","quillInstance","current","Quill","theme","modules","toolbar","header","list","quill","on","delta","oldDelta","source","root","innerHTML","mounted","ref","writeSaga","INITIALIZE","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","writePost","setOriginalPost","updatePost","id","writePostSaga","updatePostSaga","patch","postError","originalPostId","write","EditorContainer","useCallback","TagBoxBlock","TagForm","Tag","TagListBlock","TagItem","React","memo","onRemove","onChangeTags","TagList","TagBox","setInput","localTags","setLocalTags","insertTag","nextTags","filter","t","trim","TagBoxContainer","WriteActionButtonsBlock","WriteActionButtons","onCancel","onPublish","isEdit","goBack","WritePage","postSaga","READ_POST","READ_POST_SUCCESS","READ_POST_FAILURE","UNLOAD_POST","readPost","unloadPost","readPostSaga","PostViewerBlock","PostHead","PostContent","PostViewer","actionButtons","ownPost","dangerouslySetInnerHTML","__html","Fullscreen","AskModalBlock","AskModal","visible","description","confirmText","cancelText","onConfirm","AskRemoveModal","PostActionButtonsBlock","ActionButton","PostActionButtons","onEdit","modal","setModal","postId","a","delete","onPrint","window","print","CustomerInvoice","contactNumber","address","position","src","InvoiceImng","alt","top","left","bottom","fontSize","fontWeight","marginBottom","CustomerListBlock","WriteCustomerButtonWrapper","CustomerItemBlock","SearchInput","CustomerItem","customer","advancedNumber","extra","CustomerList","customers","nextState","setState","customersSaga","LIST_CUSTOMERS","LIST_CUSTOMERS_SUCCESS","LIST_CUSTOMERS_FAILURE","listCustomers","listCustomersSaga","PostListPage","advancedPayment","test","REGISTER_CUTOMER","REGISTER_CUTOMER_SUCCESS","REGISTER_CUTOMER_FAILURE","SET_ORIGINAL_CUSTOMER","UPDATE_CUSTOMER","UPDATE_CUSTOMER_SUCCESS","UPDATE_CUSTOMER_FAILURE","registerCustomer","setOriginalCustomer","updateCustomer","registerCustomerSaga","updateCustomerSaga","customerError","originalCustomerId","CustomerRegisterPage","customerSaga","READ_CUSTOMER","READ_CUSTOMER_SUCCESS","READ_CUSTOMER_FAILURE","UNLOAD_CUSTOMER","readCustomer","unloadCustomer","readCustomerSaga","CustomerViewerBlock","CustomerHead","CustomerContent","CustomerViewer","ownCustomer","CustomerActionButtonsBlock","CustomerActionButtons","customerId","CustomerPage","App","component","path","CustomerListPage","exact","Boolean","hostname","unregister","navigator","serviceWorker","ready","then","registration","rootSaga","all","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","run","getItem","loadUser","ReactDOM","render","document","getElementById"],"mappings":"inBAGA,IAAMA,EAAkBC,IAAOC,IAAV,KAqBNC,EANI,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAaC,EAAW,4BAG5C,OAAO,kBAACL,EAAoBK,EAAOD,ICYtBE,EAhCC,CACdC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,KAAM,CACJ,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,QAAU,CACR,UACA,UACA,a,+3BCxBJ,IAAMC,EAAcC,YAAH,IAUDL,EAAQC,KAAK,GAEXD,EAAQC,KAAK,IAG3B,SAAAK,GAAK,OACLA,EAAMC,WACNF,YADA,QAQA,SAAAC,GAAK,OACLA,EAAMJ,MACNG,YADA,IAEgBL,EAAQG,QAAQ,GAEdH,EAAQG,QAAQ,MAKpBH,EAAQC,KAAK,GAClBD,EAAQC,KAAK,IAKpBO,EAAeb,IAAOc,OAAV,IACdL,GAGEM,EAAaf,YAAOgB,IAAPhB,CAAH,IACZS,GAWWQ,EARA,SAAAN,GACb,OAAOA,EAAMO,GACX,kBAACH,EAAD,iBAAgBJ,EAAhB,CAAuBJ,KAAMI,EAAMJ,KAAO,EAAI,KAE9C,kBAACM,EAAiBF,I,6yBCnDtB,I,IAAMQ,EAAcnB,IAAOC,IAAV,KAUXmB,EAAUpB,YAAOE,EAAPF,CAAH,KAmBPqB,EAASrB,IAAOC,IAAV,KAINqB,EAAWtB,IAAOC,IAAV,KAiCCsB,EA5BA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACtB,OACE,oCACE,kBAACN,EAAD,KACE,kBAACC,EAAD,KACE,kBAAC,IAAD,CAAMF,GAAG,IAAIQ,UAAU,QAAvB,UAGA,kBAAC,IAAD,+CAGCF,EACC,yBAAKE,UAAU,SACb,kBAACJ,EAAD,KAAWE,EAAKG,UAChB,kBAAC,EAAD,CAAQC,QAASH,GAAjB,6BAGF,yBAAKC,UAAU,SACb,kBAAC,EAAD,CAAQR,GAAG,UAAX,yBAKR,kBAACG,EAAD,Q,wECzCSQ,E,OAxBAC,EAAMC,SCYRC,EAAS,kBAAMH,EAAOI,KAAK,qBCZlCC,EAAgB,wBAChBC,EAAiB,yBAMVC,EAAeC,YAC1BH,GACA,SAAAI,GAAW,OAAIA,KAGJC,EAAgBF,YAC3BF,GACA,SAAAG,GAAW,OAAIA,KAmBFE,EAdCC,aAAa,mBAExBP,GAAgB,SAACQ,EAAOC,GAAR,mBAAC,eACbD,GADY,kBAEdC,EAAOC,SAAU,OAJK,cAMxBT,GAAiB,SAACO,EAAOC,GAAR,mBAAC,eACdD,GADa,kBAEfC,EAAOC,SAAU,OARK,GAFR,IChBRC,EAA2B,SAAAC,GAGtC,MAAO,CAACA,EAFK,UAAMA,EAAN,YACA,UAAMA,EAAN,cAIA,SAASC,GAAkBD,EAAME,GAC9C,IAAMC,EAAO,UAAMH,EAAN,YACPI,EAAO,UAAMJ,EAAN,YAEb,iBAAO,WAAUH,GAAV,uEACL,OADK,SACCQ,YAAIf,EAAaU,IADlB,OAGc,OAHd,kBAGoBM,YAAKJ,EAASL,EAAOC,SAHzC,OAIH,OADMS,EAHH,gBAIGF,YAAI,CACRL,KAAMG,EACNL,QAASS,EAASC,KAClBC,KAAMF,IAPL,+BAUH,OAVG,oCAUGF,YAAI,CACRL,KAAMI,EACNN,QAAQ,EAAD,GACPY,OAAO,IAbN,QAgBL,OAhBK,UAgBCL,YAAIZ,EAAcO,IAhBnB,yD,gBCeCW,I,YASOC,IA9BXC,GAAgB,qB,GAEwBd,EAC5C,c,qBADKe,G,MAAOC,G,MAAeC,G,MAGvBC,GAAS,cAEFC,GAAc3B,YAAasB,IAAe,SAAAnC,GAAI,OAAIA,KAClDyC,GAAQ5B,YAAauB,IACrB5B,GAASK,YAAa0B,IAE7BG,GAAYnB,GAAkBa,IHPf,kBAAM/B,EAAOsC,IAAI,sBGStC,SAASC,KACP,IACEC,aAAaC,WAAW,QACxB,MAAOC,GACPC,QAAQC,IAAI,gCAIhB,SAAUhB,KAAV,iEAEI,OAFJ,kBAEUL,YAAKsB,GAFf,OAGIL,aAAaC,WAAW,QAH5B,+CAKIE,QAAQC,IAAR,MALJ,qDASO,SAAUf,KAAV,iEACL,OADK,SACCiB,YAAWf,GAAOM,IADnB,OAEL,OAFK,SAECS,YAAWb,GAAeM,IAF3B,OAGL,OAHK,SAGCO,YAAWZ,GAAQN,IAHpB,wCAMP,IAKehB,gBAAa,iBAAC,EAExBkB,IAAgB,SAACjB,EAAD,OAAmBlB,EAAnB,EAAUoB,QAAV,mBAAC,eACbF,GADY,IAEflB,YAJsB,YAAC,EAMxBqC,IAAgB,SAACnB,EAAD,OAAmBlB,EAAnB,EAAUoB,QAAV,mBAAC,eACbF,GADY,IAEflB,OACAoD,WAAY,UATU,YAAC,EAWxBd,IAAgB,SAACpB,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eACbF,GADY,IAEflB,KAAM,KACNoD,WAAYpB,OAdU,YAAC,EAgBxBO,IAAS,SAAArB,GAAK,kCACVA,GADU,IAEblB,KAAM,UAlBgB,GALP,CACnBA,KAAM,KACNoD,WAAY,OC/BCC,GATS,WAAO,IACrBrD,EAASsD,aAAY,kBAAe,CAAEtD,KAAjB,EAAGA,KAAyBA,SAAjDA,KACFuD,EAAWC,cAIjB,OAAO,kBAAC,EAAD,CAAQxD,KAAMA,EAAMC,SAHV,WACfsD,EAAS/C,U,4wBCJb,IAAMiD,GAAejF,IAAOC,IAAV,MACd,SAAAU,GAAK,OACLA,EAAMuE,cACNxE,YADA,QAIOL,EAAQC,KAAK,GAIXD,EAAQC,KAAK,IAoBX6E,GAbC,SAAC,GAA+C,IAA7CxD,EAA4C,EAA5CA,SAAUyD,EAAkC,EAAlCA,cAAeF,EAAmB,EAAnBA,aAC1C,OACE,kBAACD,GAAD,CAAcC,aAAcA,GAC1B,8BACE,2BACE,kBAAC,IAAD,CAAMhE,GAAE,YAAOS,IAAaA,KAGhC,8BAAO,IAAI0D,KAAKD,GAAeE,wB,4PCzBrC,IAAMC,GAAYvF,IAAOC,IAAV,KAIFI,EAAQE,KAAK,GAIXF,EAAQE,KAAK,IAiBbiF,GAZF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,kBAACF,GAAD,KACGE,EAAKC,KAAI,SAAAC,GAAG,OACX,kBAAC,IAAD,CAAMjE,UAAU,MAAMR,GAAE,gBAAWyE,GAAOC,IAAKD,GAA/C,IACIA,Q,yqBCdZ,I,GAAME,GAAgB7F,YAAOE,EAAPF,CAAH,MAIb8F,GAAyB9F,IAAOC,IAAV,MAMtB8F,GAAgB/F,IAAOC,IAAV,KAQSI,EAAQC,KAAK,GAQ1BD,EAAQC,KAAK,IAQtB0F,GAAW,SAAC,GAAc,IAAZ/D,EAAW,EAAXA,KACVmD,EAAgDnD,EAAhDmD,cAAe5D,EAAiCS,EAAjCT,KAAMiE,EAA2BxD,EAA3BwD,KAAMQ,EAAqBhE,EAArBgE,MAAOC,EAAcjE,EAAdiE,KAAMC,EAAQlE,EAARkE,IAChD,OACE,kBAACJ,GAAD,KACE,4BACE,kBAAC,IAAD,CAAM7E,GAAE,YAAOM,EAAKG,SAAZ,YAAwBwE,IAAQF,IAE1C,kBAAC,GAAD,CACEtE,SAAUH,EAAKG,SACfyD,cAAe,IAAIC,KAAKD,KAE1B,kBAAC,GAAD,CAAMK,KAAMA,IACZ,2BAAIS,KAgCKE,GA3BE,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,MAAO7D,EAAsC,EAAtCA,QAASgB,EAA6B,EAA7BA,MAAO8C,EAAsB,EAAtBA,gBAEzC,OAAI9C,EACK,kBAACqC,GAAD,iEAIP,kBAACA,GAAD,KACE,kBAACC,GAAD,KACGQ,GACC,kBAAC,EAAD,CAAQ/F,MAAI,EAACW,GAAG,UAAhB,4CAMFsB,GAAW6D,GACX,6BACGA,EAAMX,KAAI,SAAAzD,GAAI,OACb,kBAAC,GAAD,CAAUA,KAAMA,EAAM2D,IAAK3D,EAAKkE,Y,YC5D3BI,I,GARb1D,EAAyB,oB,qBAH3B2D,G,MACAC,G,MACAC,G,MAGWC,GAAYtE,YACvBmE,IACA,kBAA8B,CAAEb,IAAhC,EAAGA,IAAkChE,SAArC,EAAQA,SAAuCiF,KAA/C,EAAkBA,SAGdC,GAAgB9D,GAAkByD,ICVf,SAAC,GAA6B,IAA3BI,EAA0B,EAA1BA,KAAMjF,EAAoB,EAApBA,SAAUgE,EAAU,EAAVA,IACpCmB,EAAcC,KAAGC,UAAU,CAC/BJ,OACAjF,WACAgE,QAEF,OAAO9D,EAAOsC,IAAP,qBAAyB2C,ODK3B,SAAUP,KAAV,iEACL,OADK,SACC5B,YAAW6B,GAAYK,IADxB,wCAIP,IAqBeR,GAfD5D,aAAa,kBAAC,GAEvBgE,IAAqB,SAAC/D,EAAD,OAAmB2D,EAAnB,EAAUzD,QAAsBS,EAAhC,EAA0BE,KAA1B,mBAAC,eAClBb,GADiB,IAEpB2D,QACAY,SAAUC,SAAS7D,EAAS8D,QAAQ,aAAc,SAL7B,YAAC,GAOvBT,IAAqB,SAAChE,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eAClBF,GADiB,IAEpBc,aATqB,IANN,CACnB6C,MAAO,KACP7C,MAAO,KACPyD,SAAU,IESGG,aA5BW,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAC/BvC,EAAWC,cADgC,EAETF,aACtC,gBAAGuB,EAAH,EAAGA,MAAO7D,EAAV,EAAUA,QAAShB,EAAnB,EAAmBA,KAAnB,MAA+B,CAC7B6E,MAAOA,EAAMA,MACb7C,MAAO6C,EAAM7C,MACbhB,QAASA,EAAQ,oBACjBhB,KAAMA,EAAKA,SALP6E,EAFyC,EAEzCA,MAAO7C,EAFkC,EAElCA,MAAOhB,EAF2B,EAE3BA,QAAShB,EAFkB,EAElBA,KAgB/B,OARA+F,qBAAU,WAAO,IACP5F,EAAa2F,EAAME,OAAnB7F,SADM,EAEQoF,KAAGU,MAAMJ,EAASK,OAAQ,CAC9CC,mBAAmB,IADbhC,EAFM,EAENA,IAAKiB,EAFC,EAEDA,KAGb7B,EAAS4B,GAAU,CAAEhB,MAAKhE,WAAUiF,YACnC,CAAC7B,EAAUsC,EAASK,OAAQJ,EAAME,SAGnC,kBAAC,GAAD,CACEhF,QAASA,EACTgB,MAAOA,EACP6C,MAAOA,EACPC,gBAAiB9E,O,iQCzBvB,IAAMoG,GAAkB5H,IAAOC,IAAV,MAOf4H,GAAa7H,IAAOC,IAAV,MAEV6H,GAAY,SAAC,GAA6B,IAA3BnG,EAA0B,EAA1BA,SAAUgE,EAAgB,EAAhBA,IAAKiB,EAAW,EAAXA,KAC5BmB,EAAQhB,KAAGC,UAAU,CAAErB,MAAKiB,SAClC,OAAOjF,EAAQ,YAAQA,EAAR,YAAoBoG,GAApB,YAAmCA,IA6BrCC,GA1BI,SAAC,GAAuC,IAArCpB,EAAoC,EAApCA,KAAMK,EAA8B,EAA9BA,SAAUtF,EAAoB,EAApBA,SAAUgE,EAAU,EAAVA,IAC9C,OACE,kBAACiC,GAAD,KACE,kBAAC,EAAD,CACEK,SAAmB,IAATrB,EACV1F,GACW,IAAT0F,OAAasB,EAAYJ,GAAU,CAAEnG,WAAUgE,MAAKiB,KAAMA,EAAO,KAHrE,gBAQA,kBAACiB,GAAD,KAAajB,GACb,kBAAC,EAAD,CACEqB,SAAUrB,IAASK,EACnB/F,GACE0F,IAASK,OACLiB,EACAJ,GAAU,CAAEnG,WAAUgE,MAAKiB,KAAMA,EAAO,KALhD,kBCESQ,aA3Ba,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAAY,EACdxC,aAAY,gBAAGuB,EAAH,EAAGA,MAAO7D,EAAV,EAAUA,QAAV,MAAyB,CACxEyE,SAAUZ,EAAMY,SAChBZ,MAAOA,EAAMA,MACb7D,QAASA,EAAQ,wBAHXyE,EAD2C,EAC3CA,SAAUZ,EADiC,EACjCA,MAAO7D,EAD0B,EAC1BA,QAOzB,IAAK6D,GAAS7D,EAAS,OAAO,KARqB,IAU3Cb,EAAa2F,EAAME,OAAnB7F,SAV2C,EAazBoF,KAAGU,MAAMJ,EAASK,OAAQ,CAClDC,mBAAmB,IADbhC,EAb2C,EAa3CA,IAb2C,IAatCiB,YAbsC,MAa/B,EAb+B,EAiBnD,OACE,kBAAC,GAAD,CACEjB,IAAKA,EACLhE,SAAUA,EACViF,KAAMM,SAASN,EAAM,IACrBK,SAAUA,O,qqBClBhB,I,GAAMkB,GAAoBnI,IAAOC,IAAV,KAMPI,EAAQC,KAAK,IASvB8H,GAAWpI,IAAOC,IAAV,MA4BCoI,GAbM,SAAC,GAAkB,IAAhBlI,EAAe,EAAfA,SACtB,OACE,kBAACgI,GAAD,KACE,kBAACC,GAAD,KACE,yBAAK1G,UAAU,aACb,kBAAC,IAAD,CAAMR,GAAG,KAAT,WAEDf,K,qBCPQmI,IAhCXC,GAAe,oBACfC,GAAkB,uB,GAE+B3F,EACrD,iB,qBADK4F,G,MAAUC,G,MAAkBC,G,SAIW9F,EAC5C,c,qBADK+F,G,MAAOC,G,MAAeC,G,MAIhBC,GAAc1G,YACzBkG,IACA,kBAA2B,CACzBS,KADF,EAAGA,KAEDpD,IAFF,EAASA,IAGPqD,MAHF,EAAcA,UAMHC,GAAiB7G,YAAamG,IAAiB,SAAAQ,GAAI,OAAIA,KACvDG,GAAW9G,YAAaoG,IAAU,kBAA6B,CAC1E9G,SAD6C,EAAGA,SAEhDyH,SAF6C,EAAaA,aAI/CC,GAAQhH,YAAauG,IAAO,kBAA6B,CACpEjH,SADuC,EAAGA,SAE1CyH,SAFuC,EAAaA,aAMhDE,GAAevG,GAAkB0F,Id/Bf,SAAC,GAAD,IAAG9G,EAAH,EAAGA,SAAUyH,EAAb,EAAaA,SAAb,OACtBvH,EAAOI,KAAK,qBAAsB,CAAEN,WAAUyH,gBc+B1CG,GAAYxG,GAAkB6F,IdpCf,SAAC,GAAD,IAAGjH,EAAH,EAAGA,SAAUyH,EAAb,EAAaA,SAAb,OACnBvH,EAAOI,KAAK,kBAAmB,CAAEN,WAAUyH,gBcoCtC,SAAUd,KAAV,iEACL,OADK,SACC3D,YAAW8D,GAAUa,IADtB,OAEL,OAFK,SAEC3E,YAAWiE,GAAOW,IAFnB,wCAKP,IAAMC,GAAe,CACnBL,SAAU,CACRxH,SAAU,GACVyH,SAAU,GACVK,gBAAiB,IAEnBJ,MAAO,CACL1H,SAAU,GACVyH,SAAU,IAEZM,KAAM,KACNC,UAAW,MAwCED,GArCFjH,aAAa,kBAAC,GAEtB8F,IAAe,SAAC7F,EAAD,WAAUE,QAAWoG,EAArB,EAAqBA,KAAMpD,EAA3B,EAA2BA,IAAKqD,EAAhC,EAAgCA,MAAhC,OACdW,aAAQlH,GAAO,SAAAmH,GACbA,EAAMb,GAAMpD,GAAOqD,QAJD,YAAC,GAMtBT,IAAkB,SAAC9F,EAAD,SAAmBsG,EAAnB,EAAUpG,QAAV,mBAAC,eACfF,GADc,uBAEhBsG,EAAOQ,GAAaR,IAFJ,0BAGN,MAHM,OANG,YAAC,GAYtBN,IAAmB,SAAChG,EAAD,OAAmBgH,EAAnB,EAAU9G,QAAV,mBAAC,eAChBF,GADe,IAElBiH,UAAW,KACXD,YAfoB,YAAC,GAkBtBf,IAAmB,SAACjG,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eAChBF,GADe,IAElBiH,UAAWnG,OApBS,YAAC,GAuBtBqF,IAAgB,SAACnG,EAAD,OAAmBgH,EAAnB,EAAU9G,QAAV,mBAAC,eACbF,GADY,IAEfiH,UAAW,KACXD,YA1BoB,YAAC,GA6BtBZ,IAAgB,SAACpG,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eACbF,GADY,IAEfiH,UAAWnG,OA/BS,IAkCxBgG,I,s6BCnFF,IAAMM,GAAgB9J,IAAOC,IAAV,KAGNI,EAAQC,KAAK,IAQpByJ,GAAc/J,IAAOgK,MAAV,KAGY3J,EAAQC,KAAK,GAMXD,EAAQC,KAAK,IAUtC2J,GAASjK,IAAOC,IAAV,KAICI,EAAQC,KAAK,GAGXD,EAAQC,KAAK,IAKtB4J,GAAsBlK,YAAOiB,EAAPjB,CAAH,MAInBmK,GAAU,CACdd,MAAO,qBACPF,SAAU,4BAMNiB,GAAepK,IAAOC,IAAV,MAsDHoK,GA/CE,SAAC,GAA+C,IAA7CvH,EAA4C,EAA5CA,KAAMkG,EAAsC,EAAtCA,KAAMsB,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,SAAU/G,EAAY,EAAZA,MAC5CgH,EAAOL,GAAQrH,GACrB,OACE,kBAACgH,GAAD,KACE,4BAAKU,GACL,0BAAMD,SAAUA,GACd,kBAACR,GAAD,CACEU,aAAa,WACbC,KAAK,WACLC,YAAY,qBACZL,SAAUA,EACVrB,MAAOD,EAAKrH,WAEd,kBAACoI,GAAD,CACEU,aAAa,eACbC,KAAK,WACLC,YAAY,2BACZ7H,KAAK,WACLwH,SAAUA,EACVrB,MAAOD,EAAKI,WAEJ,aAATtG,GACC,kBAACiH,GAAD,CACEU,aAAa,eACbC,KAAK,kBACLC,YAAY,wCACZ7H,KAAK,WACLwH,SAAUA,EACVrB,MAAOD,EAAKS,kBAGfjG,GAAS,kBAAC4G,GAAD,KAAe5G,GACzB,kBAAC0G,GAAD,CAAqB3J,MAAI,EAACK,WAAS,EAACgK,MAAO,CAAEC,UAAW,SACrDL,IAGL,kBAACP,GAAD,KACY,UAATnH,EACC,kBAAC,IAAD,CAAM5B,GAAG,aAAT,4BAEA,kBAAC,IAAD,CAAMA,GAAG,UAAT,yBCpCKkG,gBApEG,SAAC,GAAiB,IAAf0D,EAAc,EAAdA,QAAc,EACPC,mBAAS,MADF,mBAC1BvH,EAD0B,KACnBwH,EADmB,KAE3BjG,EAAWC,cAFgB,EAGOF,aAAY,gBAAG4E,EAAH,EAAGA,KAAMlI,EAAT,EAASA,KAAT,MAAqB,CACvEwH,KAAMU,EAAKL,MACXK,KAAMA,EAAKA,KACXC,UAAWD,EAAKC,UAChBnI,KAAMA,EAAKA,SAJLwH,EAHyB,EAGzBA,KAAMU,EAHmB,EAGnBA,KAAMC,EAHa,EAGbA,UAAWnI,EAHE,EAGFA,KAsD/B,OA5BA+F,qBAAU,WACRxC,EAASmE,GAAe,YACvB,CAACnE,IAEJwC,qBAAU,WACR,GAAIoC,EAIF,OAHAnF,QAAQC,IAAI,6BACZD,QAAQC,IAAIkF,QACZqB,EAAS,mCAGPtB,IACFlF,QAAQC,IAAI,mCACZM,EAASd,SAEV,CAACyF,EAAMC,EAAW5E,IAErBwC,qBAAU,WACR,GAAI/F,EAAM,CACRsJ,EAAQG,KAAK,KACb,IACE5G,aAAa6G,QAAQ,OAAQC,KAAKnE,UAAUxF,IAC5C,MAAO+C,GACPC,QAAQC,IAAI,mCAGf,CAACqG,EAAStJ,IAGX,kBAAC,GAAD,CACEsB,KAAK,QACLkG,KAAMA,EACNsB,SAnDa,SAAA/F,GAAM,IAAD,EACIA,EAAE6G,OAAlBnC,EADY,EACZA,MAAOyB,EADK,EACLA,KACf3F,EACEgE,GAAY,CACVC,KAAM,QACNpD,IAAK8E,EACLzB,YA8CFsB,SAxCa,SAAAhG,GACfA,EAAE8G,iBADkB,IAEZ1J,EAAuBqH,EAAvBrH,SAAUyH,EAAaJ,EAAbI,SAClBrE,EAASsE,GAAM,CAAE1H,WAAUyH,eAsCzB5F,MAAOA,OC1DE8H,GARG,WAChB,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,QC0FSlE,gBA1FM,SAAC,GAAiB,IAAf0D,EAAc,EAAdA,QAAc,EACVC,mBAAS,MADC,mBAC7BvH,EAD6B,KACtBwH,EADsB,KAE9BjG,EAAWC,cAFmB,EAGIF,aAAY,gBAAG4E,EAAH,EAAGA,KAAMlI,EAAT,EAASA,KAAT,MAAqB,CACvEwH,KAAMU,EAAKP,SACXO,KAAMA,EAAKA,KACXC,UAAWD,EAAKC,UAChBnI,KAAMA,EAAKA,SAJLwH,EAH4B,EAG5BA,KAAMU,EAHsB,EAGtBA,KAAMC,EAHgB,EAGhBA,UAAWnI,EAHK,EAGLA,KA4E/B,OApCA+F,qBAAU,WACRxC,EAASmE,GAAe,eACvB,CAACnE,IAGJwC,qBAAU,WACR,GAAIoC,EAEF,OAAkC,MAA9BA,EAAUtG,SAASkI,YACrBP,EAAS,oFAIXA,EAAS,yCAIPtB,IACFlF,QAAQC,IAAI,yCACZD,QAAQC,IAAIiF,GACZ3E,EAASd,SAEV,CAACyF,EAAMC,EAAW5E,IAGrBwC,qBAAU,WACR,GAAI/F,EAAM,CACRsJ,EAAQG,KAAK,KACb,IACE5G,aAAa6G,QAAQ,OAAQC,KAAKnE,UAAUxF,IAC5C,MAAO+C,GACPC,QAAQC,IAAI,mCAGf,CAACqG,EAAStJ,IAGX,kBAAC,GAAD,CACEsB,KAAK,WACLkG,KAAMA,EACNsB,SAzEa,SAAA/F,GAAM,IAAD,EACIA,EAAE6G,OAAlBnC,EADY,EACZA,MAAOyB,EADK,EACLA,KACf3F,EACEgE,GAAY,CACVC,KAAM,WACNpD,IAAK8E,EACLzB,YAoEFsB,SA9Da,SAAAhG,GACfA,EAAE8G,iBADkB,IAEZ1J,EAAwCqH,EAAxCrH,SAAUyH,EAA8BJ,EAA9BI,SAAUK,EAAoBT,EAApBS,gBAE5B,IAAI,CAAC9H,EAAUyH,EAAUK,GAAiB+B,SAAS,IAKnD,OAAIpC,IAAaK,GACfuB,EAAS,qFACTjG,EAASgE,GAAY,CAAEC,KAAM,WAAYpD,IAAK,WAAYqD,MAAO,WACjElE,EACEgE,GAAY,CAAEC,KAAM,WAAYpD,IAAK,kBAAmBqD,MAAO,YAInElE,EAASoE,GAAS,CAAExH,WAAUyH,cAZ5B4B,EAAS,qEA0DTxH,MAAOA,OChFEiI,GARM,WACnB,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,Q,2vBCAN,I,GAAMC,GAAc1L,YAAOE,EAAPF,CAAH,MAKX2L,GAAa3L,IAAOgK,MAAV,KAKa3J,EAAQC,KAAK,IAIpCsL,GAAe5L,IAAOC,IAAV,MAoEH4L,GAvDA,SAAC,GAAoC,IAAlC5F,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,KAAM4F,EAAoB,EAApBA,cACvBC,EAAeC,iBAAO,MACtBC,EAAgBD,iBAAO,MAE7BzE,qBAAU,WACR0E,EAAcC,QAAU,IAAIC,KAAMJ,EAAaG,QAAS,CACtDE,MAAO,SACPzB,YAAa,uDACb0B,QAAS,CAGPC,QAAS,CACP,CAAC,CAAEC,OAAQ,KAAO,CAAEA,OAAQ,MAC5B,CAAC,OAAQ,SAAU,YAAa,UAChC,CAAC,CAAEC,KAAM,WAAa,CAAEA,KAAM,WAC9B,CAAC,aAAc,aAAc,OAAQ,aAO3C,IAAMC,EAAQR,EAAcC,QAC5BO,EAAMC,GAAG,eAAe,SAACC,EAAOC,EAAUC,GACzB,SAAXA,GACFf,EAAc,CAAElG,IAAK,OAAQqD,MAAOwD,EAAMK,KAAKC,iBAGlD,CAACjB,IAEJ,IAAMkB,EAAUhB,kBAAO,GACvBzE,qBAAU,WACJyF,EAAQd,UACZc,EAAQd,SAAU,EAClBD,EAAcC,QAAQY,KAAKC,UAAY7G,KACtC,CAACA,IAMJ,OACE,kBAACwF,GAAD,KACE,kBAACC,GAAD,CACEhB,YAAY,oDACZL,SARgB,SAAA/F,GACpBuH,EAAc,CAAElG,IAAK,QAASqD,MAAO1E,EAAE6G,OAAOnC,SAQ1CA,MAAOhD,IAET,kBAAC2F,GAAD,KACE,yBAAKqB,IAAKlB,O,YCrCDmB,IAvCXC,GAAa,mBACb5E,GAAe,qB,GAKjB1F,EAAyB,oB,qBAH3BuK,G,MACAC,G,MACAC,G,MAEIC,GAAoB,0B,GAKtB1K,EAAyB,qB,qBAH3B2K,G,MACAC,G,MACAC,G,MAGWC,GAAatL,YAAa8K,IAC1BpE,GAAc1G,YAAakG,IAAc,kBAAqB,CACzE3C,IADoD,EAAGA,IAEvDqD,MAFoD,EAAQA,UAIjD2E,GAAYvL,YAAa+K,IAAY,kBAA4B,CAC5EnH,MADgD,EAAGA,MAEnDC,KAFgD,EAAUA,KAG1DT,KAHgD,EAAgBA,SAKrDoI,GAAkBxL,YAAakL,IAAmB,SAAAtL,GAAI,OAAIA,KAC1D6L,GAAazL,YACxBmL,IACA,kBAAgC,CAC9BO,GADF,EAAGA,GAED9H,MAFF,EAAOA,MAGLC,KAHF,EAAcA,KAIZT,KAJF,EAAoBA,SAShBuI,GAAgBjL,GAAkBqK,IZxCf,SAAC,GAAD,IAAGnH,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAMT,EAAhB,EAAgBA,KAAhB,OACvB5D,EAAOI,KAAK,aAAc,CAAEgE,QAAOC,OAAMT,YYwCrCwI,GAAiBlL,GAAkByK,IZ3Bf,SAAC,GAAD,IAAGO,EAAH,EAAGA,GAAI9H,EAAP,EAAOA,MAAOC,EAAd,EAAcA,KAAMT,EAApB,EAAoBA,KAApB,OACxB5D,EAAOqM,MAAP,qBAA2BH,GAAM,CAC/B9H,QACAC,OACAT,YYyBG,SAAUyH,KAAV,iEACL,OADK,SACCvI,YAAWyI,GAAYY,IADxB,OAEL,OAFK,SAECrJ,YAAW6I,GAAaS,IAFzB,wCAKP,IAAMzE,GAAe,CACnBvD,MAAO,GACPC,KAAM,GACNT,KAAM,GACNxD,KAAM,KACNkM,UAAW,KACXC,eAAgB,MA6CHC,GA1CD5L,aAAa,kBAAC,GAEvB0K,IAAa,SAAAzK,GAAK,OAAI8G,MAFA,YAAC,GAGvBjB,IAAe,SAAC7F,EAAD,WAAUE,QAAWgD,EAArB,EAAqBA,IAAKqD,EAA1B,EAA0BA,MAA1B,mBAAC,eACZvG,GADW,kBAEbkD,EAAMqD,OALc,YAAC,GAOvBmE,IAAa,SAAA1K,GAAK,kCACdA,GADc,IAGjBT,KAAM,KACNkM,UAAW,UAXU,YAAC,GAcvBd,IAAqB,SAAC3K,EAAD,OAAmBT,EAAnB,EAAUW,QAAV,mBAAC,eAClBF,GADiB,IAEpBT,YAhBqB,YAAC,GAmBvBqL,IAAqB,SAAC5K,EAAD,OAAmByL,EAAnB,EAAUvL,QAAV,mBAAC,eAClBF,GADiB,IAEpByL,iBArBqB,YAAC,GAuBvBZ,IAAoB,SAAC7K,EAAD,OAAmBT,EAAnB,EAAUW,QAAV,mBAAC,eACjBF,GADgB,IAEnBuD,MAAOhE,EAAKgE,MACZC,KAAMjE,EAAKiE,KACXT,KAAMxD,EAAKwD,KACX2I,eAAgBnM,EAAKkE,SA5BA,YAAC,GA8BvBsH,IAAsB,SAAC/K,EAAD,OAAmBT,EAAnB,EAAUW,QAAV,mBAAC,eACnBF,GADkB,IAErBT,YAhCqB,YAAC,GAkCvByL,IAAsB,SAAChL,EAAD,OAAmByL,EAAnB,EAAUvL,QAAV,mBAAC,eACnBF,GADkB,IAErByL,iBApCqB,IAuCzB3E,IC5Ea8E,GAlBS,WACtB,IAAMvJ,EAAWC,cADW,EAEJF,aAAY,gBAAGuJ,EAAH,EAAGA,MAAH,MAAgB,CAClDpI,MAAOoI,EAAMpI,MACbC,KAAMmI,EAAMnI,SAFND,EAFoB,EAEpBA,MAAOC,EAFa,EAEbA,KAIT4F,EAAgByC,uBAAY,SAAA3L,GAAO,OAAImC,EAASgE,GAAYnG,MAAW,CAC3EmC,IAQF,OALAwC,qBAAU,WACR,OAAO,WACLxC,EAAS4I,SAEV,CAAC5I,IACG,kBAAC,GAAD,CAAQ+G,cAAeA,EAAe7F,MAAOA,EAAOC,KAAMA,K,ykCChBnE,IAAMsI,GAAcxO,IAAOC,IAAV,KAESI,EAAQC,KAAK,GAI1BD,EAAQC,KAAK,IAMpBmO,GAAUzO,IAAOgJ,KAAV,KAKS3I,EAAQC,KAAK,GAiBjBD,EAAQC,KAAK,GAIXD,EAAQC,KAAK,IAK3BoO,GAAM1O,IAAOC,IAAV,KAEEI,EAAQC,KAAK,IAOlBqO,GAAe3O,IAAOC,IAAV,MAMZ2O,GAAUC,IAAMC,MAAK,gBAAGnJ,EAAH,EAAGA,IAAKoJ,EAAR,EAAQA,SAAR,EAAkBC,aAAlB,OACzB,kBAACN,GAAD,CAAK9M,QAAS,kBAAMmN,EAASpJ,KAA7B,IAAqCA,MAIjCsJ,GAAUJ,IAAMC,MAAK,gBAAGrJ,EAAH,EAAGA,KAAMsJ,EAAT,EAASA,SAAT,OACzB,kBAACJ,GAAD,KACGlJ,EAAKC,KAAI,SAAAC,GAAG,OACX,kBAACiJ,GAAD,CAAShJ,IAAKD,EAAKA,IAAKA,EAAKoJ,SAAUA,WA+D9BG,GA1DA,SAAC,GAA4B,IAA1BzJ,EAAyB,EAAzBA,KAAMuJ,EAAmB,EAAnBA,aAAmB,EACfjE,mBAAS,IADM,mBAClCf,EADkC,KAC3BmF,EAD2B,OAEPpE,mBAAS,IAFF,mBAElCqE,EAFkC,KAEvBC,EAFuB,KAInCC,EAAYf,uBAChB,SAAA5I,GACE,GAAKA,IACDyJ,EAAU5D,SAAS7F,GAAvB,CACA,IAAM4J,EAAQ,uBAAOH,GAAP,CAAkBzJ,IAChC0J,EAAaE,GACbP,EAAaO,MAEf,CAACH,EAAWJ,IAGRD,EAAWR,uBACf,SAAA5I,GACE,IAAM4J,EAAWH,EAAUI,QAAO,SAAAC,GAAC,OAAIA,IAAM9J,KAC7C0J,EAAaE,GACbP,EAAaO,KAEf,CAACH,EAAWJ,IAGR1E,EAAWiE,uBAAY,SAAAhK,GAC3B4K,EAAS5K,EAAE6G,OAAOnC,SACjB,IAEGsB,EAAWgE,uBACf,SAAAhK,GACEA,EAAE8G,iBACFiE,EAAUtF,EAAM0F,QAChBP,EAAS,MAEX,CAACnF,EAAOsF,IAQV,OAJA/H,qBAAU,WACR8H,EAAa5J,KACZ,CAACA,IAGF,kBAAC+I,GAAD,KACE,4CACA,kBAACC,GAAD,CAASlE,SAAUA,GACjB,2BACEI,YAAY,oDACZ1B,MAAOe,EACPM,SAAUA,IAEZ,4BAAQxH,KAAK,UAAb,iBAEF,kBAACmM,GAAD,CAASxJ,KAAM2J,EAAWL,SAAUA,MC3G3BY,GAhBS,WACtB,IAAM5K,EAAWC,cACXS,EAAOX,aAAY,SAAApC,GAAK,OAAIA,EAAM2L,MAAM5I,QAW9C,OAAO,kBAAC,GAAD,CAAQuJ,aATM,SAAAO,GACnBxK,EACEgE,GAAY,CACVnD,IAAK,OACLqD,MAAOsG,MAK8B9J,KAAMA,K,kTCdnD,I,GAAMmK,GAA0B5P,IAAOC,IAAV,MASvBY,GAAeb,YAAOiB,EAAPjB,CAAH,MAkBH6P,GAXY,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACjD,OACE,kBAACJ,GAAD,KACE,kBAAC,GAAD,CAAcrP,MAAI,EAACqB,QAASmO,GAA5B,sBACOC,EAAS,eAAO,gBAEvB,kBAAC,GAAD,CAAcpO,QAASkO,GAAvB,kBCgCS1I,gBApDqB,SAAC,GAAiB,IAAf0D,EAAc,EAAdA,QAC/B/F,EAAWC,cADkC,EAEYF,aAC7D,gBAAGuJ,EAAH,EAAGA,MAAH,MAAgB,CACdpI,MAAOoI,EAAMpI,MACbC,KAAMmI,EAAMnI,KACZT,KAAM4I,EAAM5I,KACZxD,KAAMoM,EAAMpM,KACZkM,UAAWE,EAAMF,UACjBC,eAAgBC,EAAMD,mBAPlBnI,EAF2C,EAE3CA,MAAOC,EAFoC,EAEpCA,KAAMT,EAF8B,EAE9BA,KAAMxD,EAFwB,EAExBA,KAAMkM,EAFkB,EAElBA,UAAWC,EAFO,EAEPA,eAyC5C,OATA7G,qBAAU,WACR,GAAItF,EAAM,CAAC,IACDkE,EAAclE,EAAdkE,IAAK3E,EAASS,EAATT,KACbsJ,EAAQG,KAAR,YAAkBzJ,EAAKG,SAAvB,YAAmCwE,IAEjCgI,GACF3J,QAAQC,IAAI0J,KAEb,CAACrD,EAAS7I,EAAMkM,IAEjB,kBAAC,GAAD,CACE4B,UA/Bc,WAEdhL,EADEqJ,EACON,GAAW,CAAE7H,QAAOC,OAAMT,OAAMsI,GAAIK,IAI7CR,GAAU,CACR3H,QACAC,OACAT,WAuBFqK,SAjBa,WACfhF,EAAQmF,UAiBND,SAAU5B,O,SChCD8B,GAdG,WAChB,OACE,kBAAC,EAAD,KACE,kBAAC,KAAD,KACE,8EAGF,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,qBCEWC,I,GAPbtN,EAAyB,kB,qBAH3BuN,G,MACAC,G,MACAC,G,MAEIC,GAAc,mBAEPC,GAAWnO,YAAa+N,IAAW,SAAArC,GAAE,OAAIA,KACzC0C,GAAapO,YAAakO,IAEjCG,GAAe3N,GAAkBqN,InBXf,SAAArC,GAAE,OAAIlM,EAAOsC,IAAP,qBAAyB4J,OmBYhD,SAAUoC,KAAV,iEACL,OADK,SACCxL,YAAWyL,GAAWM,IADvB,wCAIP,IAAMlH,GAAe,CACnBvH,KAAM,KACNuB,MAAO,MAkBMvB,GAfFQ,aAAa,kBAAC,GAEtB4N,IAAoB,SAAC3N,EAAD,OAAmBT,EAAnB,EAAUW,QAAV,mBAAC,eACjBF,GADgB,IAEnBT,YAJoB,YAAC,GAMtBqO,IAAoB,SAAC5N,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eACjBF,GADgB,IAEnBc,aARoB,YAAC,GAUtB+M,IAAc,kBAAM/G,MAVC,IAYxBA,I,obC/BF,IAAMmH,GAAkB3Q,YAAOE,EAAPF,CAAH,MAGf4Q,GAAW5Q,IAAOC,IAAV,KACeI,EAAQC,KAAK,IAUpCuQ,GAAc7Q,IAAOC,IAAV,KAENI,EAAQC,KAAK,IAuCTwQ,GApCI,SAAC,GAAsD,IAApD7O,EAAmD,EAAnDA,KAAMuB,EAA6C,EAA7CA,MAAOhB,EAAsC,EAAtCA,QAASuO,EAA6B,EAA7BA,cAA6B,EAAdC,QAEzD,GAAIxN,EACF,OAAIA,EAAMH,UAAsC,MAA1BG,EAAMH,SAASkI,OAC5B,kBAACoF,GAAD,oFAEF,kBAACA,GAAD,mCAIT,GAAInO,IAAYP,EACd,OAAO,KAX8D,IAc/DgE,EAA2ChE,EAA3CgE,MAAOC,EAAoCjE,EAApCiE,KAAM1E,EAA8BS,EAA9BT,KAAM4D,EAAwBnD,EAAxBmD,cAAeK,EAASxD,EAATwD,KAC1C,OACE,kBAACkL,GAAD,KACE,kBAAC,KAAD,KACE,+BAAQ1K,EAAR,gBAGF,kBAAC2K,GAAD,KACE,4BAAK3K,GACL,kBAAC,GAAD,CACEtE,SAAUH,EAAKG,SACfyD,cAAeA,EACfF,cAAY,IAEd,kBAAC,GAAD,CAAMO,KAAMA,KAEbsL,EACD,kBAACF,GAAD,CAAaI,wBAAyB,CAAEC,OAAQhL,O,wwBCtDtD,IAAMiL,GAAanR,IAAOC,IAAV,MAYVmR,GAAgBpR,IAAOC,IAAV,MAmBbY,GAAeb,YAAOiB,EAAPjB,CAAH,MAiCHqR,GA1BE,SAAC,GAQX,IAPLC,EAOI,EAPJA,QACArL,EAMI,EANJA,MACAsL,EAKI,EALJA,YAKI,IAJJC,mBAII,MAJU,eAIV,MAHJC,kBAGI,MAHS,eAGT,EAFJC,EAEI,EAFJA,UACA5B,EACI,EADJA,SAEA,OAAKwB,EAEH,kBAACH,GAAD,KACE,kBAACC,GAAD,KACE,4BAAKnL,GACL,2BAAIsL,GACJ,yBAAK7P,UAAU,WACb,kBAAC,GAAD,CAAcE,QAASkO,GAAW2B,GAClC,kBAAC,GAAD,CAAclR,MAAI,EAACqB,QAAS8P,GACzBF,MATU,MCnCRG,GAbQ,SAAC,GAAsC,IAApCL,EAAmC,EAAnCA,QAASI,EAA0B,EAA1BA,UAAW5B,EAAe,EAAfA,SAC5C,OACE,kBAAC,GAAD,CACEwB,QAASA,EACTrL,MAAM,kCACNsL,YAAY,0FACZC,YAAY,eACZE,UAAWA,EACX5B,SAAUA,K,6fCNhB,IAAM8B,GAAyB5R,IAAOC,IAAV,MAOtB4R,GAAe7R,IAAOc,OAAV,KAGPT,EAAQC,KAAK,GAOND,EAAQC,KAAK,GAClBD,EAAQE,KAAK,IAmCXuR,GA5BW,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAQhD,EAAe,EAAfA,SAAe,EACxBhE,oBAAS,GADe,mBAC3CiH,EAD2C,KACpCC,EADoC,KAalD,OACE,oCACE,kBAACL,GAAD,KACE,kBAACC,GAAD,CAAcjQ,QAASmQ,GAAvB,gBACA,kBAACF,GAAD,CAAcjQ,QAfE,WACpBqQ,GAAS,KAcL,iBAEF,kBAAC,GAAD,CACEX,QAASU,EACTN,UAbY,WAChBO,GAAS,GACTlD,KAYIe,SAjBW,WACfmC,GAAS,QCpCE,IC0DA7K,aAjDa,SAAC,GAAwB,IAAtBE,EAAqB,EAArBA,MAAOwD,EAAc,EAAdA,QAE5BoH,EAAW5K,EAAME,OAAjB0K,OACFnN,EAAWC,cAHiC,EAIXF,aACrC,gBAAG7C,EAAH,EAAGA,KAAMO,EAAT,EAASA,QAAShB,EAAlB,EAAkBA,KAAlB,MAA8B,CAC5BS,KAAMA,EAAKA,KACXuB,MAAOvB,EAAKuB,MACZhB,QAASA,EAAQ,kBACjBhB,KAAMA,EAAKA,SALPS,EAJ0C,EAI1CA,KAAMuB,EAJoC,EAIpCA,MAAOhB,EAJ6B,EAI7BA,QAAShB,EAJoB,EAIpBA,KAS9B+F,qBAAU,WAGR,OAFAxC,EAASyL,GAAS0B,IAEX,WACLnN,EAAS0L,SAEV,CAAC1L,EAAUmN,IAEd,IAKMnD,EAAQ,wCAAG,sBAAAoD,EAAA,+EzBXOpE,EyBaHmE,EzBbSrQ,EAAOuQ,OAAP,qBAA4BrE,IyBWzC,OAGbjD,EAAQG,KAAK,KAHA,+CAKbzG,QAAQC,IAAR,MALa,iCzBXO,IAAAsJ,IyBWP,oBAAH,qDASRiD,GAAWxP,GAAQA,EAAK2E,QAAUlE,GAAQA,EAAKT,KAAK2E,KAE1D,OACE,kBAAC,GAAD,CACElE,KAAMA,EACNO,QAASA,EACTgB,MAAOA,EACPuN,cACEC,GAAW,kBAAC,GAAD,CAAmBe,OAtBrB,WACbhN,EAAS8I,GAAgB5L,IACzB6I,EAAQG,KAAK,WAoBqC8D,SAAUA,SDpDjD,IAA0B,qC,wvBEKzC,IAAMoC,GAAanR,IAAOC,IAAV,MAYVmR,GAAgBpR,IAAOC,IAAV,MAkBbY,GAAeb,YAAOiB,EAAPjB,CAAH,MAOZqS,GAAU,WACZC,OAAOC,SAsCMC,GAnCO,SAAC,GAAuD,IAAtDlB,EAAqD,EAArDA,QAASxB,EAA4C,EAA5CA,SAAUpF,EAAkC,EAAlCA,KAAM+H,EAA4B,EAA5BA,cAAeC,EAAa,EAAbA,QAC9D,OAAKpB,EAED,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,6BACI,yBAAK1G,MAAO,CAAC+H,SAAS,aAClB,yBAAKC,IAAMC,GAAcC,IAAI,oCAEjC,yBAAKlI,MAAO,CACZmI,IAAK,MACLC,KAAM,MACNC,OAAQ,QACRC,SAAU,QACVC,WAAY,OACZR,SAAU,aACN,yBAAK/H,MAAO,CAAEwI,aAAe,WACxB1I,GAEL,yBAAKE,MAAO,CAAEwI,aAAe,WACxBV,GAEL,yBAAK9H,MAAO,CAAEwI,aAAe,WACxBX,KAIb,4BACA,kBAAC,GAAD,CAAc7Q,QAASyQ,IAAvB,gBACA,kBAAC,GAAD,CAAczQ,QAASkO,GAAvB,kBA5BS,M,41BCrCzB,I,GAAMuD,GAAoBrT,YAAOE,EAAPF,CAAH,MAIjBsT,GAA6BtT,IAAOC,IAAV,MAM1BsT,GAAoBvT,IAAOC,IAAV,KAQKI,EAAQC,KAAK,GAQ1BD,EAAQC,KAAK,IAQtBkT,GAAcxT,IAAOgK,MAAV,KAIY3J,EAAQC,KAAK,IAKpCmT,GAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,SAAc,EACV3I,oBAAS,GADC,mBAC7BiH,EAD6B,KACtBC,EADsB,KAW5B7M,EAAkFsO,EAAlFtO,cAAe5D,EAAmEkS,EAAnElS,KAAMkJ,EAA6DgJ,EAA7DhJ,KAAM+H,EAAuDiB,EAAvDjB,cAA+BC,GAAwBgB,EAAxCC,eAAwCD,EAAxBhB,SAASkB,EAAeF,EAAfE,MAAOzN,EAAQuN,EAARvN,IAClF,OACE,kBAACoN,GAAD,KACE,4BACE,kBAAC,IAAD,CAAMrS,GAAE,YAAOM,EAAKG,SAAZ,YAAwBwE,IAAQuE,IAE1C,kBAAC,GAAD,CACE/I,SAAUH,EAAKG,SACfyD,cAAe,IAAIC,KAAKD,KAE1B,kBAAC,GAAD,CAAMK,KAAMmO,IACZ,6CAASlB,GACT,mDAAUD,GACV,kBAAC,EAAD,CAAQ7Q,QAtBW,WACrBqQ,GAAS,KAqBP,6BACA,kBAAC,GAAD,CACEX,QAASU,EACTlC,SAtBW,WACfmC,GAAS,IAsBLvH,KAAMA,EACN+H,cAAeA,EACfC,QAASA,MAkDFmB,GA3CM,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,UAAWtR,EAAwC,EAAxCA,QAASgB,EAA+B,EAA/BA,MAAO8C,EAAwB,EAAxBA,gBASjD,OAAI9C,EACK,kBAAC6P,GAAD,iEAIP,kBAACA,GAAD,KACE,kBAACC,GAAD,KACE,kBAACE,GAAD,CACE9I,KAAK,gBACLC,YAAY,0DACZL,SAlBe,SAAC/F,GACtBC,QAAQC,IAAIF,EAAE6G,OAAOnC,OACrB,IAAI8K,EAAY,GAChBA,EAAUxP,EAAE6G,OAAOV,MAAQnG,EAAE6G,OAAOnC,MACpC,GAAK+K,SAASD,MAkBTzN,GACC,kBAAC,EAAD,CAAQ/F,MAAI,EAACW,GAAG,qBAAhB,2CAMFsB,GAAWsR,GACX,6BACGA,EAAUpO,KAAI,SAAAgO,GAAQ,OACrB,kBAAC,GAAD,CAAcA,SAAUA,EAAU9N,IAAK8N,EAASvN,Y,YCxG3C8N,I,GARbpR,EAAyB,4B,qBAH3BqR,G,MACAC,G,MACAC,G,MAGWC,GAAgBhS,YAC3B6R,IACA,kBAAgC,CAAEN,MAAlC,EAAGA,MAAsCjS,SAAzC,EAAUA,SAAyCiF,KAAnD,EAAoBA,SAGhB0N,GAAoBvR,GAAkBmR,ICVf,SAAC,GAA6B,IAA3BtN,EAA0B,EAA1BA,KAAMjF,EAAoB,EAApBA,SAAUgE,EAAU,EAAVA,IACxCmB,EAAcC,KAAGC,UAAU,CAC/BJ,OACAjF,WACAgE,QAEF,OAAO9D,EAAOsC,IAAP,yBAA6B2C,ODK/B,SAAUmN,KAAV,iEACL,OADK,SACCtP,YAAWuP,GAAgBI,IAD5B,wCAIP,IAqBeR,GAfGrR,aAAa,kBAAC,GAE3B0R,IAAyB,SAACzR,EAAD,OAAmBoR,EAAnB,EAAUlR,QAA0BS,EAApC,EAA8BE,KAA9B,mBAAC,eACtBb,GADqB,IAExBoR,YACA7M,SAAUC,SAAS7D,EAAS8D,QAAQ,aAAc,SALzB,YAAC,GAO3BiN,IAAyB,SAAC1R,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eACtBF,GADqB,IAExBc,aATyB,IANV,CACnBsQ,UAAW,KACXtQ,MAAO,KACPyD,SAAU,IESGG,gBA5Be,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACnCvC,EAAWC,cADoC,EAETF,aAC1C,gBAAGgP,EAAH,EAAGA,UAAWtR,EAAd,EAAcA,QAAShB,EAAvB,EAAuBA,KAAvB,MAAmC,CACjCsS,UAAWA,EAAUA,UACrBtQ,MAAOsQ,EAAUtQ,MACjBhB,QAASA,EAAQ,4BACjBhB,KAAMA,EAAKA,SALPsS,EAF6C,EAE7CA,UAAWtQ,EAFkC,EAElCA,MAAOhB,EAF2B,EAE3BA,QAAShB,EAFkB,EAElBA,KAgBnC,OARA+F,qBAAU,WAAO,IACP5F,EAAa2F,EAAME,OAAnB7F,SADM,EAEUoF,KAAGU,MAAMJ,EAASK,OAAQ,CAChDC,mBAAmB,IADbiM,EAFM,EAENA,MAAOhN,EAFD,EAECA,KAGf7B,EAASsP,GAAc,CAAET,QAAOjS,WAAUiF,YACzC,CAAC7B,EAAUsC,EAASK,OAAQJ,EAAME,SAGnC,kBAAC,GAAD,CACEhF,QAASA,EACTgB,MAAOA,EACPsQ,UAAWA,EACXxN,gBAAiB9E,O,iQCzBvB,IAAMoG,GAAkB5H,IAAOC,IAAV,MAOf4H,GAAa7H,IAAOC,IAAV,MAEV6H,GAAY,SAAC,GAA6B,IAA3BnG,EAA0B,EAA1BA,SAAUgE,EAAgB,EAAhBA,IAAKiB,EAAW,EAAXA,KAC5BmB,EAAQhB,KAAGC,UAAU,CAAErB,MAAKiB,SAClC,OAAOjF,EAAQ,YAAQA,EAAR,YAAoBoG,GAApB,YAAmCA,IA6BrCC,GA1BI,SAAC,GAAuC,IAArCpB,EAAoC,EAApCA,KAAMK,EAA8B,EAA9BA,SAAUtF,EAAoB,EAApBA,SAAUgE,EAAU,EAAVA,IAC9C,OACE,kBAAC,GAAD,KACE,kBAAC,EAAD,CACEsC,SAAmB,IAATrB,EACV1F,GACW,IAAT0F,OAAasB,EAAYJ,GAAU,CAAEnG,WAAUgE,MAAKiB,KAAMA,EAAO,KAHrE,gBAQA,kBAAC,GAAD,KAAaA,GACb,kBAAC,EAAD,CACEqB,SAAUrB,IAASK,EACnB/F,GACE0F,IAASK,OACLiB,EACAJ,GAAU,CAAEnG,WAAUgE,MAAKiB,KAAMA,EAAO,KALhD,kBCESQ,gBA3Ba,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAAY,EACVxC,aAAY,gBAAGgP,EAAH,EAAGA,UAAWtR,EAAd,EAAcA,QAAd,MAA6B,CAChFyE,SAAU6M,EAAU7M,SACpB6M,UAAWA,EAAUA,UACrBtR,QAASA,EAAQ,gCAHXyE,EAD2C,EAC3CA,SAAU6M,EADiC,EACjCA,UAAWtR,EADsB,EACtBA,QAO7B,IAAKsR,GAAatR,EAAS,OAAO,KARiB,IAU3Cb,EAAa2F,EAAME,OAAnB7F,SAV2C,EAazBoF,KAAGU,MAAMJ,EAASK,OAAQ,CAClDC,mBAAmB,IADbhC,EAb2C,EAa3CA,IAb2C,IAatCiB,YAbsC,MAa/B,EAb+B,EAiBnD,OACE,kBAAC,GAAD,CACEjB,IAAKA,EACLhE,SAAUA,EACViF,KAAMM,SAASN,EAAM,IACrBK,SAAUA,OCbDsN,GAVM,WACnB,OACE,oCACE,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,0aCLN,I,GAAM7I,GAAc1L,YAAOE,EAAPF,CAAH,MAKX2L,GAAa3L,IAAOgK,MAAV,KAKa3J,EAAQC,KAAK,IAoE3BuL,GAnDA,SAAC,GAAsE,IAApEnB,EAAmE,EAAnEA,KAAM+H,EAA6D,EAA7DA,cAAeC,EAA8C,EAA9CA,QAAS8B,EAAqC,EAArCA,gBAAiB1I,EAAoB,EAApBA,cAsB/D,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CACEnB,YAAY,oDACZL,SAxBe,SAAA/F,GACnBuH,EAAc,CAAElG,IAAK,OAAQqD,MAAO1E,EAAE6G,OAAOnC,SAwBzCA,MAAOyB,IAEV,kBAAC,GAAD,CACGC,YAAY,uEACZL,SAtBwB,SAAA/F,GAC5BuH,EAAc,CAAElG,IAAK,gBAAiBqD,MAAO1E,EAAE6G,OAAOnC,SAsBlDA,MAAOwJ,IAET,kBAAC,GAAD,CACE9H,YAAY,oDACZL,SA/BkB,SAAA/F,GACtBuH,EAAc,CAAElG,IAAK,UAAWqD,MAAO1E,EAAE6G,OAAOnC,SA+B5CA,MAAOyJ,IAET,kBAAC,GAAD,CACE/H,YAAY,0DACZL,SA5B0B,SAAA/F,IAGR,KAAnBA,EAAE6G,OAAOnC,OAFD,aAEoBwL,KAAKlQ,EAAE6G,OAAOnC,SAC3C6C,EAAc,CAAElG,IAAK,kBAAmBqD,MAAO1E,EAAE6G,OAAOnC,QAE1D1E,EAAE6G,OAAOnC,MAAM,IAuBXA,MAAOuL,M,YCvBElL,IA5CX6D,GAAa,sBACb5E,GAAe,wB,GAKjB1F,EAAyB,6B,qBAH3B6R,G,MACAC,G,MACAC,G,MAEIC,GAAwB,iC,GAK1BhS,EAAyB,4B,qBAH3BiS,G,MACAC,G,MACAC,G,MAGWrH,GAAatL,YAAa8K,IAC1BpE,GAAc1G,YAAakG,IAAc,kBAAqB,CACzE3C,IADoD,EAAGA,IAEvDqD,MAFoD,EAAQA,UAIjDgM,GAAmB5S,YAAaqS,IAAkB,kBAA+D,CAC5HhK,KAD6D,EAAGA,KAEhE+H,cAF6D,EAASA,cAGtEC,QAH6D,EAAwBA,QAIrF8B,gBAJ6D,EAAiCA,gBAK9FZ,MAL6D,EAAkDA,UAOpGsB,GAAsB7S,YAAawS,IAAuB,SAAAnB,GAAQ,OAAIA,KACtEyB,GAAiB9S,YAC5ByS,IACA,kBAAkE,CAChE/G,GADF,EAAGA,GAEDrD,KAFF,EAAOA,KAGL+H,cAHF,EAAaA,cAIXC,QAJF,EAA4BA,QAK1B8B,gBALF,EAAqCA,gBAMnCZ,MANF,EAAqDA,UAYjDwB,GAAuBrS,GAAkB2R,IN7Cf,SAAC,GAAD,IAAGhK,EAAH,EAAGA,KAAM+H,EAAT,EAASA,cAAeC,EAAxB,EAAwBA,QAAS8B,EAAjC,EAAiCA,gBAAiBZ,EAAlD,EAAkDA,MAAlD,OAC9B/R,EAAOI,KAAK,iBAAkB,CAAEyI,OAAM+H,gBAAeC,UAAS8B,kBAAiBZ,aM6C3EyB,GAAqBtS,GAAkB+R,INhCf,SAAC,GAAD,IAAG/G,EAAH,EAAGA,GAAIrD,EAAP,EAAOA,KAAM+H,EAAb,EAAaA,cAAeC,EAA5B,EAA4BA,QAAS8B,EAArC,EAAqCA,gBAAiBZ,EAAtD,EAAsDA,MAAtD,OAC5B/R,EAAOqM,MAAP,yBAA+BH,GAAM,CACnCrD,OACA+H,gBACAC,UACA8B,kBACAZ,aM4BG,SAAUtK,KAAV,iEACL,OADK,SACC3E,YAAW+P,GAAkBU,IAD9B,OAEL,OAFK,SAECzQ,YAAWmQ,GAAiBO,IAF7B,wCAKP,IAAM7L,GAAe,CACnBkB,KAAO,GACP+H,cAAgB,GAChBC,QAAU,GACV8B,gBAAkB,EAClBZ,MAAQ,GACRF,SAAU,KACV4B,cAAe,KACfC,mBAAoB,MA+CPpM,GA5CE1G,aAAa,kBAAC,GAE1B0K,IAAa,SAAAzK,GAAK,OAAI8G,MAFG,YAAC,GAG1BjB,IAAe,SAAC7F,EAAD,WAAUE,QAAWgD,EAArB,EAAqBA,IAAKqD,EAA1B,EAA0BA,MAA1B,mBAAC,eACZvG,GADW,kBAEbkD,EAAMqD,OALiB,YAAC,GAO1ByL,IAAmB,SAAAhS,GAAK,kCACpBA,GADoB,IAGvBgR,SAAU,KACV4B,cAAe,UAXS,YAAC,GAc1BX,IAA2B,SAACjS,EAAD,OAAmBgR,EAAnB,EAAU9Q,QAAV,mBAAC,eACxBF,GADuB,IAE1BgR,gBAhBwB,YAAC,GAmB1BkB,IAA2B,SAAClS,EAAD,OAAmB4S,EAAnB,EAAU1S,QAAV,mBAAC,eACxBF,GADuB,IAE1B4S,qBArBwB,YAAC,GAuB1BT,IAAwB,SAACnS,EAAD,OAAmBgR,EAAnB,EAAU9Q,QAAV,mBAAC,eACrBF,GADoB,IAEvBgI,KAAMgJ,EAAShJ,KACf+H,cAAgBiB,EAASjB,cACzBC,QAASgB,EAAShB,QAClB8B,gBAAkBd,EAASc,gBAC3BZ,MAAOF,EAASE,MAChB2B,mBAAoB7B,EAASvN,SA9BL,YAAC,GAgC1B4O,IAA0B,SAACrS,EAAD,OAAmBgR,EAAnB,EAAU9Q,QAAV,mBAAC,eACvBF,GADsB,IAEzBgR,gBAlCwB,YAAC,GAoC1BsB,IAA0B,SAACtS,EAAD,OAAmB4S,EAAnB,EAAU1S,QAAV,mBAAC,eACvBF,GADsB,IAEzB4S,qBAtCwB,IAyC5B9L,ICnFa8E,GApBS,WACtB,IAAMvJ,EAAWC,cADW,EAE8BF,aAAY,gBAAGqE,EAAH,EAAGA,SAAH,MAAmB,CACvFuB,KAAMvB,EAASuB,KACf+H,cAAetJ,EAASsJ,cACxBC,QAAUvJ,EAASuJ,QACnB8B,gBAAkBrL,EAASqL,oBAJrB9J,EAFoB,EAEpBA,KAAM+H,EAFc,EAEdA,cAAeC,EAFD,EAECA,QAAS8B,EAFV,EAEUA,gBAMhC1I,EAAgByC,uBAAY,SAAA3L,GAAO,OAAImC,EAASgE,GAAYnG,MAAW,CAC3EmC,IAQF,OALAwC,qBAAU,WACR,OAAO,WACLxC,EAAS4I,SAEV,CAAC5I,IACG,kBAAC,GAAD,CAAQ+G,cAAeA,EAAepB,KAAMA,EAAM+H,cAAeA,EAAeC,QAASA,EAAS8B,gBAAiBA,K,gkCClB5H,IAAMhG,GAAcxO,IAAOC,IAAV,KAESI,EAAQC,KAAK,GAI1BD,EAAQC,KAAK,IAMpBmO,GAAUzO,IAAOgJ,KAAV,KAKS3I,EAAQC,KAAK,GAiBjBD,EAAQC,KAAK,GAIXD,EAAQC,KAAK,IAK3BoO,GAAM1O,IAAOC,IAAV,KAEEI,EAAQC,KAAK,IAOlBqO,GAAe3O,IAAOC,IAAV,MAMZ2O,GAAUC,IAAMC,MAAK,gBAAG8E,EAAH,EAAGA,MAAO7E,EAAV,EAAUA,SAAV,EAAoBC,aAApB,OACzB,kBAAC,GAAD,CAAKpN,QAAS,kBAAMmN,EAAS6E,KAA7B,IAAuCA,MAInC3E,GAAUJ,IAAMC,MAAK,gBAAG8E,EAAH,EAAGA,MAAO7E,EAAV,EAAUA,SAAV,OACzB,kBAAC,GAAD,KACG6E,EAAMlO,KAAI,SAAAkO,GAAK,OACd,kBAAC,GAAD,CAAShO,IAAKgO,EAAOA,MAAOA,EAAO7E,SAAUA,WA+DpCG,GA1DA,SAAC,GAA6B,IAA3B0E,EAA0B,EAA1BA,MAAO5E,EAAmB,EAAnBA,aAAmB,EAChBjE,mBAAS,IADO,mBACnCf,EADmC,KAC5BmF,EAD4B,OAERpE,mBAAS,IAFD,mBAEnCqE,EAFmC,KAExBC,EAFwB,KAIpCC,EAAYf,uBAChB,SAAAqF,GACE,GAAKA,IACDxE,EAAU5D,SAASoI,GAAvB,CACA,IAAMrE,EAAQ,uBAAOH,GAAP,CAAkBwE,IAChCvE,EAAaE,GACbP,EAAaO,MAEf,CAACH,EAAWJ,IAGRD,EAAWR,uBACf,SAAAqF,GACE,IAAMrE,EAAWH,EAAUI,QAAO,SAAAC,GAAC,OAAIA,IAAMmE,KAC7CvE,EAAaE,GACbP,EAAaO,KAEf,CAACH,EAAWJ,IAGR1E,EAAWiE,uBAAY,SAAAhK,GAC3B4K,EAAS5K,EAAE6G,OAAOnC,SACjB,IAEGsB,EAAWgE,uBACf,SAAAhK,GACEA,EAAE8G,iBACFiE,EAAUtF,EAAM0F,QAChBP,EAAS,MAEX,CAACnF,EAAOsF,IAQV,OAJA/H,qBAAU,WACR8H,EAAauE,KACZ,CAACA,IAGF,kBAAC,GAAD,KACE,4CACA,kBAAC,GAAD,CAASrJ,SAAUA,GACjB,2BACEI,YAAY,oDACZ1B,MAAOe,EACPM,SAAUA,IAEZ,4BAAQxH,KAAK,UAAb,iBAEF,kBAAC,GAAD,CAAS8Q,MAAOxE,EAAWL,SAAUA,MC3G5BY,GAhBS,WACtB,IAAM5K,EAAWC,cACX4O,EAAQ9O,aAAY,SAAApC,GAAK,OAAIA,EAAMyG,SAASyK,SAWlD,OAAO,kBAAC,GAAD,CAAQ5E,aATM,SAAAO,GACnBxK,EACEgE,GAAY,CACVnD,IAAK,QACLqD,MAAOsG,MAK8BqE,MAAOA,K,kTCdpD,I,GAAMhE,GAA0B5P,IAAOC,IAAV,MASvBY,GAAeb,YAAOiB,EAAPjB,CAAH,MAkBH6P,GAXY,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACjD,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,CAAczP,MAAI,EAACqB,QAASmO,GAA5B,gBACMC,EAAS,eAAO,gBAEtB,kBAAC,GAAD,CAAcpO,QAASkO,GAAvB,kBCqCS1I,gBAzDqB,SAAC,GAAiB,IAAf0D,EAAc,EAAdA,QAC/B/F,EAAWC,cADkC,EAE2DF,aAC5G,gBAAGqE,EAAH,EAAGA,SAAH,MAAmB,CACjBuB,KAAMvB,EAASuB,KACf+H,cAAetJ,EAASsJ,cACxBC,QAAUvJ,EAASuJ,QACnB8B,gBAAkBrL,EAASqL,gBAC3BZ,MAAOzK,EAASyK,MAChBF,SAAUvK,EAASuK,SACnB4B,cAAenM,EAASmM,cACxBC,mBAAoBpM,EAASoM,uBATzB7K,EAF2C,EAE3CA,KAAM+H,EAFqC,EAErCA,cAAeC,EAFsB,EAEtBA,QAAS8B,EAFa,EAEbA,gBAAiBZ,EAFJ,EAEIA,MAAOF,EAFX,EAEWA,SAAU4B,EAFrB,EAEqBA,cAAeC,EAFpC,EAEoCA,mBA8CvF,OATAhO,qBAAU,WACR,GAAImM,EAAU,CAAC,IACLvN,EAAcuN,EAAdvN,IAAK3E,EAASkS,EAATlS,KACbsJ,EAAQG,KAAR,YAAkBzJ,EAAKG,SAAvB,YAAmCwE,IAEjCmP,GACF9Q,QAAQC,IAAI6Q,KAEb,CAACxK,EAAS4I,EAAU4B,IAErB,kBAAC,GAAD,CACEvF,UAlCc,WAChB,GAAIwF,EAGF,OAFA/Q,QAAQC,IAAI,qBAAqB8Q,QACjCxQ,EAASoQ,GAAe,CAAEzK,OAAM+H,gBAAeC,UAAS8B,kBAAiBZ,QAAO7F,GAAIwH,KAGtFxQ,EACEkQ,GAAiB,CACfvK,OACA+H,gBACAC,UACA8B,kBACAZ,YAuBF9D,SAjBa,WACfhF,EAAQmF,UAiBND,SAAUuF,OCrCDC,GAdc,WAC3B,OACE,kBAAC,EAAD,KACE,kBAAC,KAAD,KACE,kFAGF,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,Q,YCEWC,I,GAPb5S,EAAyB,0B,qBAH3B6S,G,MACAC,G,MACAC,G,MAEIC,GAAkB,2BAEXC,GAAezT,YAAaqT,IAAe,SAAA3H,GAAE,OAAIA,KACjDgI,GAAiB1T,YAAawT,IAErCG,GAAmBjT,GAAkB2S,IbXf,SAAA3H,GAAE,OAAIlM,EAAOsC,IAAP,yBAA6B4J,OaYxD,SAAU0H,KAAV,iEACL,OADK,SACC9Q,YAAW+Q,GAAeM,IAD3B,wCAIP,IAAMxM,GAAe,CACnBkK,SAAU,KACVlQ,MAAO,MAkBMkQ,GAfEjR,aAAa,kBAAC,GAE1BkT,IAAwB,SAACjT,EAAD,OAAmBgR,EAAnB,EAAU9Q,QAAV,mBAAC,eACrBF,GADoB,IAEvBgR,gBAJwB,YAAC,GAM1BkC,IAAwB,SAAClT,EAAD,OAAmBc,EAAnB,EAAUZ,QAAV,mBAAC,eACrBF,GADoB,IAEvBc,aARwB,YAAC,GAU1BqS,IAAkB,kBAAMrM,MAVC,IAY5BA,I,+cC/BF,IAAMyM,GAAsBjW,YAAOE,EAAPF,CAAH,MAGnBkW,GAAelW,IAAOC,IAAV,KACWI,EAAQC,KAAK,IAUpC6V,GAAkBnW,IAAOC,IAAV,KAGVI,EAAQC,KAAK,IA0CT8V,GAvCQ,SAAC,GAA8D,IAA5D1C,EAA2D,EAA3DA,SAAUlQ,EAAiD,EAAjDA,MAAOhB,EAA0C,EAA1CA,QAASuO,EAAiC,EAAjCA,cAAiC,EAAlBsF,YAEjE,GAAI7S,EACF,OAAIA,EAAMH,UAAsC,MAA1BG,EAAMH,SAASkI,OAC5B,kBAAC0K,GAAD,oFAEF,kBAACA,GAAD,mCAIT,GAAIzT,IAAYkR,EACd,OAAO,KAX0E,IAc3EhJ,EAA8EgJ,EAA9EhJ,KAAM+H,EAAwEiB,EAAxEjB,cAAeC,EAAyDgB,EAAzDhB,QAAS8B,EAAgDd,EAAhDc,gBAAiBhT,EAA+BkS,EAA/BlS,KAAM4D,EAAyBsO,EAAzBtO,cAAewO,EAAUF,EAAVE,MAC5E,OACE,kBAACqC,GAAD,KACE,kBAAC,KAAD,KACE,+BAAQvL,EAAR,cAGF,kBAACwL,GAAD,KACE,4BAAKxL,GACL,kBAAC,GAAD,CACE/I,SAAUH,EAAKG,SACfyD,cAAeA,EACfF,cAAY,IAEd,kBAAC,GAAD,CAAMO,KAAMmO,IAPd,kBASK,kBAACuC,GAAD,CAAiBlF,wBAAyB,CAAEC,OAAQwB,KATzD,wBAUM,kBAACyD,GAAD,CAAiBlF,wBAAyB,CAAEC,OAAQuB,KAV1D,qCAWU+B,GAETzD,IC9CQY,GAbQ,SAAC,GAAsC,IAApCL,EAAmC,EAAnCA,QAASI,EAA0B,EAA1BA,UAAW5B,EAAe,EAAfA,SAC5C,OACE,kBAAC,GAAD,CACEwB,QAASA,EACTrL,MAAM,4BACNsL,YAAY,oFACZC,YAAY,eACZE,UAAWA,EACX5B,SAAUA,K,6fCNhB,IAAMwG,GAA6BtW,IAAOC,IAAV,MAO1B4R,GAAe7R,IAAOc,OAAV,KAGPT,EAAQC,KAAK,GAOND,EAAQC,KAAK,GAClBD,EAAQE,KAAK,IAmCXgW,GA5Be,SAAC,GAA0B,IAAxBxE,EAAuB,EAAvBA,OAAQhD,EAAe,EAAfA,SAAe,EAC5BhE,oBAAS,GADmB,mBAC/CiH,EAD+C,KACxCC,EADwC,KAatD,OACE,oCACE,kBAACqE,GAAD,KACE,kBAAC,GAAD,CAAc1U,QAASmQ,GAAvB,gBACA,kBAAC,GAAD,CAAcnQ,QAfE,WACpBqQ,GAAS,KAcL,iBAEF,kBAAC,GAAD,CACEX,QAASU,EACTN,UAbY,WAChBO,GAAS,GACTlD,KAYIe,SAjBW,WACfmC,GAAS,QCsBE7K,gBAjDiB,SAAC,GAAwB,IAAtBE,EAAqB,EAArBA,MAAOwD,EAAc,EAAdA,QAEhC0L,EAAelP,EAAME,OAArBgP,WACFzR,EAAWC,cAHqC,EAIXF,aACzC,gBAAG4O,EAAH,EAAGA,SAAUlR,EAAb,EAAaA,QAAShB,EAAtB,EAAsBA,KAAtB,MAAkC,CAChCkS,SAAUA,EAASA,SACnBlQ,MAAOkQ,EAASlQ,MAChBhB,QAASA,EAAQ,0BACjBhB,KAAMA,EAAKA,SALPkS,EAJ8C,EAI9CA,SAAUlQ,EAJoC,EAIpCA,MAAOhB,EAJ6B,EAI7BA,QAAShB,EAJoB,EAIpBA,KASlC+F,qBAAU,WAGR,OAFAxC,EAAS+Q,GAAaU,IAEf,WACLzR,EAASgR,SAEV,CAAChR,EAAUyR,IAEd,IAKMzH,EAAQ,wCAAG,sBAAAoD,EAAA,+EjBTWpE,EiBWHyI,EjBXS3U,EAAOuQ,OAAP,yBAAgCrE,IiBSjD,OAGbjD,EAAQG,KAAK,KAHA,+CAKbzG,QAAQC,IAAR,MALa,iCjBTW,IAAAsJ,IiBSX,oBAAH,qDASRsI,GAAe7U,GAAQA,EAAK2E,QAAUuN,GAAYA,EAASlS,KAAK2E,KAEtE,OACE,kBAAC,GAAD,CACEuN,SAAUA,EACVlR,QAASA,EACTgB,MAAOA,EACPuN,cACEsF,GAAe,kBAAC,GAAD,CAAuBtE,OAtB7B,WACbhN,EAASmQ,GAAoBxB,IAC7B5I,EAAQG,KAAK,sBAoB6C8D,SAAUA,SCvCzD0H,GATM,WACnB,OACE,oCACE,kBAAC,GAAD,MACA,kBAAC,GAAD,QCsBSC,GAlBH,WACV,OACE,oCACE,kBAAC,KAAD,KACE,4CAIF,kBAAC,IAAD,CAAOC,UAAWrL,GAAWsL,KAAK,WAClC,kBAAC,IAAD,CAAOD,UAAWlL,GAAcmL,KAAK,cACrC,kBAAC,IAAD,CAAOD,UAAWzG,GAAW0G,KAAK,WAElC,kBAAC,IAAD,CAAOD,UAAWE,GAAkBD,KAAM,CAAC,cAAe,KAAME,OAAK,IACrE,kBAAC,IAAD,CAAOH,UAAWnB,GAAsBoB,KAAK,sBAC7C,kBAAC,IAAD,CAAOD,UAAWF,GAAcG,KAAK,8BCdvBG,QACW,cAA7BzE,OAAOjL,SAAS2P,UAEe,UAA7B1E,OAAOjL,SAAS2P,UAEhB1E,OAAOjL,SAAS2P,SAAS1P,MACvB,2DA8GC,SAAS2P,KACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaL,gB,2CC3GFM,IAAV,SAAUA,KAAV,iEACL,OADK,SACCC,YAAI,CAAClP,KAAY5E,KAAYwJ,KAAaiD,KAAY5J,KAAa0N,KAAiB3K,KAAgBmM,OADrG,wCAIQgC,OAhBKC,2BAAgB,CAClChO,QACAlH,UACAhB,QACA6M,SACApM,QACAoE,SACAyN,aACAJ,YACAvK,cCPIwO,GAAiBC,eACjBC,GAAQC,uBACZL,GACAM,+BAAoBC,2BAAgBL,MAetCA,GAAeM,IAAIV,IAZnB,WACE,IACE,IAAM/V,EAAO6C,aAAa6T,QAAQ,QAClC,IAAK1W,EAAM,OAEXqW,GAAM9S,SAASf,GAAYxC,IAC3BqW,GAAM9S,SAASd,MACf,MAAOM,GACPC,QAAQC,IAAI,gCAKhB0T,GAEAC,IAASC,OACP,kBAAC,IAAD,CAAUR,MAAOA,IACf,kBAAC,IAAD,KACE,kBAAC,KAAD,KACE,kBAAC,GAAD,SAINS,SAASC,eAAe,SAG1BpB,KAEAA,M","file":"static/js/main.6f9994f7.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst ResponsiveBlock = styled.div`\n  padding-left: 1rem;\n  padding-right: 1rem;\n  width: 1024px;\n  margin: 0 auto; /* 중앙 정렬 */\n\n  /* 브라우저 크기에 따라 가로 사이즈 변경 */\n  @media (max-width: 1024px) {\n    width: 768px;\n  }\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst Responsive = ({ children, ...rest }) => {\n  // style, className, onClick, onMouseMove 등의 props를 사용할 수 있도록\n  // ...rest를 사용하여 ResponsiveBlock에게 전달\n  return <ResponsiveBlock {...rest}>{children}</ResponsiveBlock>;\n};\n\nexport default Responsive;\n","// source: https://yeun.github.io/open-color/\nconst palette = {\n  gray: [\n    '#f8f9fa',\n    '#f1f3f5',\n    '#e9ecef',\n    '#dee2e6',\n    '#ced4da',\n    '#adb5bd',\n    '#868e96',\n    '#495057',\n    '#343a40',\n    '#212529'\n  ],\n  cyan: [\n    '#e3fafc',\n    '#c5f6fa',\n    '#99e9f2',\n    '#66d9e8',\n    '#3bc9db',\n    '#22b8cf',\n    '#15aabf',\n    '#1098ad',\n    '#0c8599',\n    '#0b7285'\n  ],\n  magenta : [\n    '#8b008b',\n    '#9932cc',\n    '#8a2be2 '\n  ]\n};\n\nexport default palette;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst buttonStyle = css`\n  border: none;\n  border-radius: 4px;\n  font-size: 1rem;\n  font-weight: bold;\n  padding: 0.25rem 1rem;\n  color: white;\n  outline: none;\n  cursor: pointer;\n\n  background: ${palette.gray[8]};\n  &:hover {\n    background: ${palette.gray[6]};\n  }\n\n  ${props =>\n    props.fullWidth &&\n    css`\n      padding-top: 0.75rem;\n      padding-bottom: 0.75rem;\n      width: 100%;\n      font-size: 1.125rem;\n    `}\n\n  ${props =>\n    props.cyan &&\n    css`\n      background: ${palette.magenta[0]};\n      &:hover {\n        background: ${palette.magenta[1]};\n      }\n    `}\n\n    &:disabled {\n    background: ${palette.gray[3]};\n    color: ${palette.gray[5]};\n    cursor: not-allowed;\n  }\n`;\n\nconst StyledButton = styled.button`\n  ${buttonStyle}\n`;\n\nconst StyledLink = styled(Link)`\n  ${buttonStyle}\n`;\n\nconst Button = props => {\n  return props.to ? (\n    <StyledLink {...props} cyan={props.cyan ? 1 : 0} />\n  ) : (\n    <StyledButton {...props} />\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport Responsive from './Responsive';\nimport Button from './Button';\n\nconst HeaderBlock = styled.div`\n  position: fixed;\n  width: 100%;\n  background: white;\n  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.08);\n`;\n\n/**\n * Responsive 컴포넌트의 속성에 스타일을 추가해서 새로운 컴포넌트 생성\n */\nconst Wrapper = styled(Responsive)`\n  height: 4rem;\n  display: flex;\n  align-items: center;\n  justify-content: space-between; /* 자식 엘리먼트 사이에 여백을 최대로 설정 */\n  .logo {\n    font-size: 1.125rem;\n    font-weight: 800;\n    letter-spacing: 2px;\n  }\n  .right {\n    display: flex;\n    align-items: center;\n  }\n`;\n\n/**\n * 헤더가 fixed로 되어 있기 때문에 페이지의 컨텐츠가 4rem 아래 나타나도록 해주는 컴포넌트\n */\nconst Spacer = styled.div`\n  height: 4rem;\n`;\n\nconst UserInfo = styled.div`\n  font-weight: 800;\n  margin-right: 1rem;\n`;\n\nconst Header = ({ user, onLogout }) => {\n  return (\n    <>\n      <HeaderBlock>\n        <Wrapper>\n          <Link to=\"/\" className=\"logo\">\n            WINEUS\n          </Link>\n          <Link>\n            고객 구매 관리\n          </Link>\n          {user ? (\n            <div className=\"right\">\n              <UserInfo>{user.username}</UserInfo>\n              <Button onClick={onLogout}>로그아웃</Button>\n            </div>\n          ) : (\n            <div className=\"right\">\n              <Button to=\"/login\">로그인</Button>\n            </div>\n          )}\n        </Wrapper>\n      </HeaderBlock>\n      <Spacer />\n    </>\n  );\n};\n\nexport default Header;\n","import axios from 'axios';\n\nconst client = axios.create();\n\n/*\n  글로벌 설정 예시:\n  \n  // API 주소를 다른 곳으로 사용함\n  client.defaults.baseURL = 'https://external-api-server.com/' \n\n  // 헤더 설정\n  client.defaults.headers.common['Authorization'] = 'Bearer a1b2c3d4';\n\n  // 인터셉터 설정\n  axios.intercepter.response.use(\\\n    response => {\n      // 요청 성공 시 특정 작업 수행\n      return response;\n    }, \n    error => {\n      // 요청 실패 시 특정 작업 수행\n      return Promise.reject(error);\n    }\n  })  \n*/\n\nexport default client;\n","import client from './client';\n\n// 로그인\nexport const login = ({ username, password }) =>\n  client.post('/api/auth/login', { username, password });\n\n// 회원가입\nexport const register = ({ username, password }) =>\n  client.post('/api/auth/register', { username, password });\n\n// 로그인 상태 확인\nexport const check = () => client.get('/api/auth/check');\n\n// 로그아웃\nexport const logout = () => client.post('/api/auth/logout');\n","import { createAction, handleActions } from 'redux-actions';\n\nconst START_LOADING = 'loading/START_LOADING';\nconst FINISH_LOADING = 'loading/FINISH_LOADING';\n\n/*\n 요청을 위한 액션 타입을 payload로 설정합니다 (예: \"sample/GET_POST\")\n*/\n\nexport const startLoading = createAction(\n  START_LOADING,\n  requestType => requestType\n);\n\nexport const finishLoading = createAction(\n  FINISH_LOADING,\n  requestType => requestType\n);\n\nconst initialState = {};\n\nconst loading = handleActions(\n  {\n    [START_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: true\n    }),\n    [FINISH_LOADING]: (state, action) => ({\n      ...state,\n      [action.payload]: false\n    })\n  },\n  initialState\n);\n\nexport default loading;\n","import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\n\nexport const createRequestActionTypes = type => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\n\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n\n  return function*(action) {\n    yield put(startLoading(type)); // 로딩 시작\n    try {\n      const response = yield call(request, action.payload);\n      yield put({\n        type: SUCCESS,\n        payload: response.data,\n        meta: response,\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: e,\n        error: true,\n      });\n    }\n    yield put(finishLoading(type)); // 로딩 끝\n  };\n}\n","import { createAction, handleActions } from 'redux-actions';\nimport { takeLatest, call } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\n\nconst TEMP_SET_USER = 'user/TEMP_SET_USER'; // 새로고침 이후 임시 로그인 처리\n// 회원 정보 확인\nconst [CHECK, CHECK_SUCCESS, CHECK_FAILURE] = createRequestActionTypes(\n  'user/CHECK',\n);\nconst LOGOUT = 'user/LOGOUT';\n\nexport const tempSetUser = createAction(TEMP_SET_USER, user => user);\nexport const check = createAction(CHECK);\nexport const logout = createAction(LOGOUT);\n\nconst checkSaga = createRequestSaga(CHECK, authAPI.check);\n\nfunction checkFailureSaga() {\n  try {\n    localStorage.removeItem('user'); // localStorage 에서 user 제거하고\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nfunction* logoutSaga() {\n  try {\n    yield call(authAPI.logout); // logout API 호출\n    localStorage.removeItem('user'); // localStorage 에서 user 제거\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* userSaga() {\n  yield takeLatest(CHECK, checkSaga);\n  yield takeLatest(CHECK_FAILURE, checkFailureSaga);\n  yield takeLatest(LOGOUT, logoutSaga);\n}\n\nconst initialState = {\n  user: null,\n  checkError: null,\n};\n\nexport default handleActions(\n  {\n    [TEMP_SET_USER]: (state, { payload: user }) => ({\n      ...state,\n      user,\n    }),\n    [CHECK_SUCCESS]: (state, { payload: user }) => ({\n      ...state,\n      user,\n      checkError: null,\n    }),\n    [CHECK_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      user: null,\n      checkError: error,\n    }),\n    [LOGOUT]: state => ({\n      ...state,\n      user: null,\n    }),\n  },\n  initialState,\n);\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Header from '../../components/common/Header';\nimport { logout } from '../../modules/user';\n\nconst HeaderContainer = () => {\n  const { user } = useSelector(({ user }) => ({ user: user.user }));\n  const dispatch = useDispatch();\n  const onLogout = () => {\n    dispatch(logout());\n  };\n  return <Header user={user} onLogout={onLogout} />;\n};\n\nexport default HeaderContainer;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\n\nconst SubInfoBlock = styled.div`\n  ${props =>\n    props.hasMarginTop &&\n    css`\n      margin-top: 1rem;\n    `}\n  color: ${palette.gray[6]};\n\n  /* span 사이에 가운뎃점 문자 보여주기*/\n  span + span:before {\n    color: ${palette.gray[4]};\n    padding-left: 0.25rem;\n    padding-right: 0.25rem;\n    content: '\\\\B7'; /* 가운뎃점 문자 */\n  }\n`;\n\nconst SubInfo = ({ username, publishedDate, hasMarginTop }) => {\n  return (\n    <SubInfoBlock hasMarginTop={hasMarginTop}>\n      <span>\n        <b>\n          <Link to={`/@${username}`}>{username}</Link>\n        </b>\n      </span>\n      <span>{new Date(publishedDate).toLocaleDateString()}</span>\n    </SubInfoBlock>\n  );\n};\n\nexport default SubInfo;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\nconst TagsBlock = styled.div`\n  margin-top: 0.5rem;\n  .tag {\n    display: inline-block;\n    color: ${palette.cyan[7]};\n    text-decoration: none;\n    margin-right: 0.5rem;\n    &:hover {\n      color: ${palette.cyan[6]};\n    }\n  }\n`;\n\nconst Tags = ({ tags }) => {\n  return (\n    <TagsBlock>\n      {tags.map(tag => (\n        <Link className=\"tag\" to={`/?tag=${tag}`} key={tag}>\n          #{tag}\n        </Link>\n      ))}\n    </TagsBlock>\n  );\n};\n\nexport default Tags;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Responsive from '../common/Responsive';\nimport Button from '../common/Button';\nimport palette from '../../lib/styles/palette';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport { Link } from 'react-router-dom';\n\nconst PostListBlock = styled(Responsive)`\n  margin-top: 3rem;\n`;\n\nconst WritePostButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 3rem;\n`;\n\nconst PostItemBlock = styled.div`\n  padding-top: 3rem;\n  padding-bottom: 3rem;\n  /* 맨 위 포스트는 padding-top 없음 */\n  &:first-child {\n    padding-top: 0;\n  }\n  & + & {\n    border-top: 1px solid ${palette.gray[2]};\n  }\n\n  h2 {\n    font-size: 2rem;\n    margin-bottom: 0;\n    margin-top: 0;\n    &:hover {\n      color: ${palette.gray[6]};\n    }\n  }\n  p {\n    margin-top: 2rem;\n  }\n`;\n\nconst PostItem = ({ post }) => {\n  const { publishedDate, user, tags, title, body, _id } = post;\n  return (\n    <PostItemBlock>\n      <h2>\n        <Link to={`/@${user.username}/${_id}`}>{title}</Link>\n      </h2>\n      <SubInfo\n        username={user.username}\n        publishedDate={new Date(publishedDate)}\n      />\n      <Tags tags={tags} />\n      <p>{body}</p>\n    </PostItemBlock>\n  );\n};\n\nconst PostList = ({ posts, loading, error, showWriteButton }) => {\n  // 에러 발생 시\n  if (error) {\n    return <PostListBlock>에러가 발생했습니다.</PostListBlock>;\n  }\n\n  return (\n    <PostListBlock>\n      <WritePostButtonWrapper>\n        {showWriteButton && (\n          <Button cyan to=\"/write\">\n            새 글 작성하기\n          </Button>\n        )}\n      </WritePostButtonWrapper>\n      {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\n      {!loading && posts && (\n        <div>\n          {posts.map(post => (\n            <PostItem post={post} key={post._id} />\n          ))}\n        </div>\n      )}\n    </PostListBlock>\n  );\n};\n\nexport default PostList;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  LIST_POSTS,\n  LIST_POSTS_SUCCESS,\n  LIST_POSTS_FAILURE,\n] = createRequestActionTypes('posts/LIST_POSTS');\n\nexport const listPosts = createAction(\n  LIST_POSTS,\n  ({ tag, username, page }) => ({ tag, username, page }),\n);\n\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\n\nconst initialState = {\n  posts: null,\n  error: null,\n  lastPage: 1,\n};\n\nconst posts = handleActions(\n  {\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\n    }),\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n  },\n  initialState,\n);\n\nexport default posts;\n","import qs from 'qs';\nimport client from './client';\n\nexport const writePost = ({ title, body, tags }) =>\n  client.post('/api/posts', { title, body, tags });\n\nexport const readPost = id => client.get(`/api/posts/${id}`);\n\nexport const listPosts = ({ page, username, tag }) => {\n  const queryString = qs.stringify({\n    page,\n    username,\n    tag,\n  });\n  return client.get(`/api/posts?${queryString}`);\n};\n\nexport const updatePost = ({ id, title, body, tags }) =>\n  client.patch(`/api/posts/${id}`, {\n    title,\n    body,\n    tags,\n  });\n\nexport const removePost = id => client.delete(`/api/posts/${id}`);\n","import React, { useEffect } from 'react';\nimport qs from 'qs';\nimport { withRouter } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostList from '../../components/posts/PostList';\nimport { listPosts } from '../../modules/posts';\n\nconst PostListContainer = ({ location, match }) => {\n  const dispatch = useDispatch();\n  const { posts, error, loading, user } = useSelector(\n    ({ posts, loading, user }) => ({\n      posts: posts.posts,\n      error: posts.error,\n      loading: loading['posts/LIST_POSTS'],\n      user: user.user,\n    }),\n  );\n  useEffect(() => {\n    const { username } = match.params;\n    const { tag, page } = qs.parse(location.search, {\n      ignoreQueryPrefix: true,\n    });\n    dispatch(listPosts({ tag, username, page }));\n  }, [dispatch, location.search, match.params]);\n\n  return (\n    <PostList\n      loading={loading}\n      error={error}\n      posts={posts}\n      showWriteButton={user}\n    />\n  );\n};\n\nexport default withRouter(PostListContainer);\n","import React from 'react';\nimport styled from 'styled-components';\nimport qs from 'qs';\nimport Button from '../common/Button';\n\nconst PaginationBlock = styled.div`\n  width: 320px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 3rem;\n`;\nconst PageNumber = styled.div``;\n\nconst buildLink = ({ username, tag, page }) => {\n  const query = qs.stringify({ tag, page });\n  return username ? `/@${username}?${query}` : `/?${query}`;\n};\n\nconst Pagination = ({ page, lastPage, username, tag }) => {\n  return (\n    <PaginationBlock>\n      <Button\n        disabled={page === 1}\n        to={\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\n        }\n      >\n        이전\n      </Button>\n      <PageNumber>{page}</PageNumber>\n      <Button\n        disabled={page === lastPage}\n        to={\n          page === lastPage\n            ? undefined\n            : buildLink({ username, tag, page: page + 1 })\n        }\n      >\n        다음\n      </Button>\n    </PaginationBlock>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport Pagination from '../../components/posts/Pagination';\nimport { useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport qs from 'qs';\n\nconst PaginationContainer = ({ location, match }) => {\n  const { lastPage, posts, loading } = useSelector(({ posts, loading }) => ({\n    lastPage: posts.lastPage,\n    posts: posts.posts,\n    loading: loading['posts/LIST_POSTS'],\n  }));\n\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\n  if (!posts || loading) return null;\n\n  const { username } = match.params;\n\n  // page가 없으면 1을 기본값으로 사용\n  const { tag, page = 1 } = qs.parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n\n  return (\n    <Pagination\n      tag={tag}\n      username={username}\n      page={parseInt(page, 10)}\n      lastPage={lastPage}\n    />\n  );\n};\n\nexport default withRouter(PaginationContainer);\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport { Link } from 'react-router-dom';\n\n/**\n * 회원가입 / 로그인 페이지의 레이아웃을 담당하는 컴포넌트입니다.\n */\n\n/* 화면 전체를 채움 */\nconst AuthTemplateBlock = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  background: ${palette.gray[2]};\n  /* flex로 내부 내용 중앙 정렬 */\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\n/* 흰색 박스 */\nconst WhiteBox = styled.div`\n  .logo-area {\n    display: block;\n    padding-bottom: 2rem;\n    text-align: center;\n    font-weight: bold;\n    letter-spacing: 2px;\n  }\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.025);\n  padding: 2rem;\n  width: 360px;\n  background: white;\n  border-radius: 2px;\n`;\n\nconst AuthTemplate = ({ children }) => {\n  return (\n    <AuthTemplateBlock>\n      <WhiteBox>\n        <div className=\"logo-area\">\n          <Link to=\"/\">WINEUS</Link>\n        </div>\n        {children}\n      </WhiteBox>\n    </AuthTemplateBlock>\n  );\n};\n\nexport default AuthTemplate;\n","import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, {\n  createRequestActionTypes\n} from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\n\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\n\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\n  'auth/REGISTER'\n);\n\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\n  'auth/LOGIN'\n);\n\nexport const changeField = createAction(\n  CHANGE_FIELD,\n  ({ form, key, value }) => ({\n    form, // register , login\n    key, // username, password, passwordConfirm\n    value // 실제 바꾸려는 값\n  })\n);\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register / login\nexport const register = createAction(REGISTER, ({ username, password }) => ({\n  username,\n  password\n}));\nexport const login = createAction(LOGIN, ({ username, password }) => ({\n  username,\n  password\n}));\n\n// saga 생성\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\n\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  },\n  auth: null,\n  authError: null\n};\n\nconst auth = handleActions(\n  {\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\n      produce(state, draft => {\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\n      }),\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\n      ...state,\n      [form]: initialState[form],\n      authError: null // 폼 전환 시 회원 인증 에러 초기화\n    }),\n    // 회원가입 성공\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth\n    }),\n    // 회원가입 실패\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error\n    }),\n    // 로그인 성공\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\n      ...state,\n      authError: null,\n      auth\n    }),\n    // 로그인 실패\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      authError: error\n    })\n  },\n  initialState\n);\n\nexport default auth;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport palette from '../../lib/styles/palette';\nimport Button from '../common/Button';\n\n/**\n * 회원가입 또는 로그인 폼을 보여줍니다.\n */\n\nconst AuthFormBlock = styled.div`\n  h3 {\n    margin: 0;\n    color: ${palette.gray[8]};\n    margin-bottom: 1rem;\n  }\n`;\n\n/**\n * 스타일링된 input\n */\nconst StyledInput = styled.input`\n  font-size: 1rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[5]};\n  padding-bottom: 0.5rem;\n  outline: none;\n  width: 100%;\n  &:focus {\n    color: $oc-teal-7;\n    border-bottom: 1px solid ${palette.gray[7]};\n  }\n  & + & {\n    margin-top: 1rem;\n  }\n`;\n\n/**\n * 폼 하단에 로그인 혹은 회원가입 링크를 보여줌\n */\nconst Footer = styled.div`\n  margin-top: 2rem;\n  text-align: right;\n  a {\n    color: ${palette.gray[6]};\n    text-decoration: underline;\n    &:hover {\n      color: ${palette.gray[9]};\n    }\n  }\n`;\n\nconst ButtonWithMarginTop = styled(Button)`\n  margin-top: 1rem;\n`;\n\nconst textMap = {\n  login: '로그인',\n  register: '회원가입'\n};\n\n/**\n * 에러를 보여줍니다\n */\nconst ErrorMessage = styled.div`\n  color: red;\n  text-align: center;\n  font-size: 0.875rem;\n  margin-top: 1rem;\n`;\n\nconst AuthForm = ({ type, form, onChange, onSubmit, error }) => {\n  const text = textMap[type];\n  return (\n    <AuthFormBlock>\n      <h3>{text}</h3>\n      <form onSubmit={onSubmit}>\n        <StyledInput\n          autoComplete=\"username\"\n          name=\"username\"\n          placeholder=\"아이디\"\n          onChange={onChange}\n          value={form.username}\n        />\n        <StyledInput\n          autoComplete=\"new-password\"\n          name=\"password\"\n          placeholder=\"비밀번호\"\n          type=\"password\"\n          onChange={onChange}\n          value={form.password}\n        />\n        {type === 'register' && (\n          <StyledInput\n            autoComplete=\"new-password\"\n            name=\"passwordConfirm\"\n            placeholder=\"비밀번호 확인\"\n            type=\"password\"\n            onChange={onChange}\n            value={form.passwordConfirm}\n          />\n        )}\n        {error && <ErrorMessage>{error}</ErrorMessage>}\n        <ButtonWithMarginTop cyan fullWidth style={{ marginTop: '1rem' }}>\n          {text}\n        </ButtonWithMarginTop>\n      </form>\n      <Footer>\n        {type === 'login' ? (\n          <Link to=\"/register\">회원가입</Link>\n        ) : (\n          <Link to=\"/login\">로그인</Link>\n        )}\n      </Footer>\n    </AuthFormBlock>\n  );\n};\n\nexport default AuthForm;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { changeField, initializeForm, login } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\n\nconst LoginForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.login,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  // 인풋 변경 이벤트 핸들러\n  const onChange = e => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'login',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = e => {\n    e.preventDefault();\n    const { username, password } = form;\n    dispatch(login({ username, password }));\n  };\n\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('login'));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (authError) {\n      console.log('오류 발생');\n      console.log(authError);\n      setError('로그인 실패');\n      return;\n    }\n    if (auth) {\n      console.log('로그인 성공');\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  useEffect(() => {\n    if (user) {\n      history.push('/');\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <AuthForm\n      type=\"login\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default withRouter(LoginForm);\n","import React from 'react';\nimport AuthTemplate from '../../components/auth/AuthTemplate';\nimport LoginForm from '../../containers/auth/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <AuthTemplate>\n      <LoginForm />\n    </AuthTemplate>\n  );\n};\n\nexport default LoginPage;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\n\nconst RegisterForm = ({ history }) => {\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\n    form: auth.register,\n    auth: auth.auth,\n    authError: auth.authError,\n    user: user.user,\n  }));\n  // 인풋 변경 이벤트 핸들러\n  const onChange = e => {\n    const { value, name } = e.target;\n    dispatch(\n      changeField({\n        form: 'register',\n        key: name,\n        value,\n      }),\n    );\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = e => {\n    e.preventDefault();\n    const { username, password, passwordConfirm } = form;\n    // 하나라도 비어있다면\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    }\n    // 비밀번호가 일치하지 않는다면\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({ form: 'register', key: 'password', value: '' }));\n      dispatch(\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\n      );\n      return;\n    }\n    dispatch(register({ username, password }));\n  };\n\n  // 컴포넌트가 처음 렌더링 될 때 form 을 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  // 회원가입 성공 / 실패 처리\n  useEffect(() => {\n    if (authError) {\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n      // 기타 이유\n      setError('회원가입 실패');\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  // user 값이 잘 설정되었는지 확인\n  useEffect(() => {\n    if (user) {\n      history.push('/'); // 홈 화면으로 이동\n      try {\n        localStorage.setItem('user', JSON.stringify(user));\n      } catch (e) {\n        console.log('localStorage is not working');\n      }\n    }\n  }, [history, user]);\n\n  return (\n    <AuthForm\n      type=\"register\"\n      form={form}\n      onChange={onChange}\n      onSubmit={onSubmit}\n      error={error}\n    />\n  );\n};\n\nexport default withRouter(RegisterForm);\n","import React from 'react';\nimport AuthTemplate from '../../components/auth/AuthTemplate';\nimport RegisterForm from '../../containers/auth/RegisterForm';\n\nconst RegisterPage = () => {\n  return (\n    <AuthTemplate>\n      <RegisterForm />\n    </AuthTemplate>\n  );\n};\n\nexport default RegisterPage;\n","import React, { useRef, useEffect } from 'react';\nimport Quill from 'quill';\nimport 'quill/dist/quill.bubble.css';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\n\nconst EditorBlock = styled(Responsive)`\n  /* 페이지 위 아래 여백 지정 */\n  padding-top: 5rem;\n  padding-bottom: 5rem;\n`;\nconst TitleInput = styled.input`\n  font-size: 3rem;\n  outline: none;\n  padding-bottom: 0.5rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[4]};\n  margin-bottom: 2rem;\n  width: 100%;\n`;\nconst QuillWrapper = styled.div`\n  /* 최소 크기 지정 및 padding 제거 */\n  .ql-editor {\n    padding: 0;\n    min-height: 320px;\n    font-size: 1.125rem;\n    line-height: 1.5;\n  }\n  .ql-editor.ql-blank::before {\n    left: 0px;\n  }\n`;\n\nconst Editor = ({ title, body, onChangeField }) => {\n  const quillElement = useRef(null); // Quill을 적용할 DivElement를 설정\n  const quillInstance = useRef(null); // Quill 인스턴스를 설정\n\n  useEffect(() => {\n    quillInstance.current = new Quill(quillElement.current, {\n      theme: 'bubble',\n      placeholder: '내용을 작성하세요...',\n      modules: {\n        // 더 많은 옵션\n        // https://quilljs.com/docs/modules/toolbar/ 참고\n        toolbar: [\n          [{ header: '1' }, { header: '2' }],\n          ['bold', 'italic', 'underline', 'strike'],\n          [{ list: 'ordered' }, { list: 'bullet' }],\n          ['blockquote', 'code-block', 'link', 'image'],\n        ],\n      },\n    });\n\n    // quill에 text-change 이벤트 핸들러 등록\n    // 참고: https://quilljs.com/docs/api/#events\n    const quill = quillInstance.current;\n    quill.on('text-change', (delta, oldDelta, source) => {\n      if (source === 'user') {\n        onChangeField({ key: 'body', value: quill.root.innerHTML });\n      }\n    });\n  }, [onChangeField]);\n\n  const mounted = useRef(false);\n  useEffect(() => {\n    if (mounted.current) return;\n    mounted.current = true;\n    quillInstance.current.root.innerHTML = body;\n  }, [body]);\n\n  const onChangeTitle = e => {\n    onChangeField({ key: 'title', value: e.target.value });\n  };\n\n  return (\n    <EditorBlock>\n      <TitleInput\n        placeholder=\"제목을 입력하세요\"\n        onChange={onChangeTitle}\n        value={title}\n      />\n      <QuillWrapper>\n        <div ref={quillElement} />\n      </QuillWrapper>\n    </EditorBlock>\n  );\n};\n\nexport default Editor;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst [\n  WRITE_POST,\n  WRITE_POST_SUCCESS,\n  WRITE_POST_FAILURE,\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [\n  UPDATE_POST,\n  UPDATE_POST_SUCCESS,\n  UPDATE_POST_FAILURE,\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\n  key,\n  value,\n}));\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\n  title,\n  body,\n  tags,\n}));\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const updatePost = createAction(\n  UPDATE_POST,\n  ({ id, title, body, tags }) => ({\n    id,\n    title,\n    body,\n    tags,\n  }),\n);\n\n// saga 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\n\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\n\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null,\n};\n\nconst write = handleActions(\n  {\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\n      ...state,\n      [key]: value, // 특정 key 값을 업데이트\n    }),\n    [WRITE_POST]: state => ({\n      ...state,\n      // post와 postError를 초기화\n      post: null,\n      postError: null,\n    }),\n    // 포스트 작성 성공\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    // 포스트 작성 실패\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\n      ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id,\n    }),\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\n      ...state,\n      postError,\n    }),\n  },\n  initialState,\n);\n\nexport default write;\n","import React, { useEffect, useCallback } from 'react';\nimport Editor from '../../components/write/Editor';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeField, initialize } from '../../modules/write';\n\nconst EditorContainer = () => {\n  const dispatch = useDispatch();\n  const { title, body } = useSelector(({ write }) => ({\n    title: write.title,\n    body: write.body,\n  }));\n  const onChangeField = useCallback(payload => dispatch(changeField(payload)), [\n    dispatch,\n  ]);\n  // 언마운트될 때 초기화\n  useEffect(() => {\n    return () => {\n      dispatch(initialize());\n    };\n  }, [dispatch]);\n  return <Editor onChangeField={onChangeField} title={title} body={body} />;\n};\n\nexport default EditorContainer;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\nconst TagBoxBlock = styled.div`\n  width: 100%;\n  border-top: 1px solid ${palette.gray[2]};\n  padding-top: 2rem;\n\n  h4 {\n    color: ${palette.gray[8]}\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst TagForm = styled.form`\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  width: 256px;\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\n  input,\n  button {\n    outline: none;\n    border: none;\n    font-size: 1rem;\n  }\n\n  input {\n    padding: 0.5rem;\n    flex: 1;\n  }\n  button {\n    cursor: pointer;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    border: none;\n    background: ${palette.gray[8]};\n    color: white;\n    font-weight: bold;\n    &:hover {\n      background: ${palette.gray[6]};\n    }\n  }\n`;\n\nconst Tag = styled.div`\n  margin-right: 0.5rem;\n  color: ${palette.gray[6]};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst TagListBlock = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`;\n\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\nconst TagItem = React.memo(({ tag, onRemove, onChangeTags }) => (\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n));\n\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\nconst TagList = React.memo(({ tags, onRemove }) => (\n  <TagListBlock>\n    {tags.map(tag => (\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\n    ))}\n  </TagListBlock>\n));\n\nconst TagBox = ({ tags, onChangeTags }) => {\n  const [input, setInput] = useState('');\n  const [localTags, setLocalTags] = useState([]);\n\n  const insertTag = useCallback(\n    tag => {\n      if (!tag) return; // 공백이라면 추가하지 않음\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\n      const nextTags = [...localTags, tag];\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onRemove = useCallback(\n    tag => {\n      const nextTags = localTags.filter(t => t !== tag);\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onChange = useCallback(e => {\n    setInput(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\n      setInput(''); // input 초기화\n    },\n    [input, insertTag],\n  );\n\n  // tags 값이 바뀔 때\n  useEffect(() => {\n    setLocalTags(tags);\n  }, [tags]);\n\n  return (\n    <TagBoxBlock>\n      <h4>태그</h4>\n      <TagForm onSubmit={onSubmit}>\n        <input\n          placeholder=\"태그를 입력하세요\"\n          value={input}\n          onChange={onChange}\n        />\n        <button type=\"submit\">추가</button>\n      </TagForm>\n      <TagList tags={localTags} onRemove={onRemove} />\n    </TagBoxBlock>\n  );\n};\n\nexport default TagBox;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TagBox from '../../components/write/TagBox';\nimport { changeField } from '../../modules/write';\n\nconst TagBoxContainer = () => {\n  const dispatch = useDispatch();\n  const tags = useSelector(state => state.write.tags);\n\n  const onChangeTags = nextTags => {\n    dispatch(\n      changeField({\n        key: 'tags',\n        value: nextTags,\n      }),\n    );\n  };\n\n  return <TagBox onChangeTags={onChangeTags} tags={tags} />;\n};\n\nexport default TagBoxContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\n\nconst WriteActionButtonsBlock = styled.div`\n  margin-top: 1rem;\n  margin-bottom: 3rem;\n  button + button {\n    margin-left: 0.5rem;\n  }\n`;\n\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\nconst StyledButton = styled(Button)`\n  height: 2.125rem;\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\n  return (\n    <WriteActionButtonsBlock>\n      <StyledButton cyan onClick={onPublish}>\n        포스트 {isEdit ? '수정' : '등록'}\n      </StyledButton>\n      <StyledButton onClick={onCancel}>취소</StyledButton>\n    </WriteActionButtonsBlock>\n  );\n};\n\nexport default WriteActionButtons;\n","import React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { writePost, updatePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = ({ history }) => {\n  const dispatch = useDispatch();\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId,\n    }),\n  );\n\n  // 포스트 등록\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\n      return;\n    }\n    dispatch(\n      writePost({\n        title,\n        body,\n        tags,\n      }),\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패시 할 작업\n  useEffect(() => {\n    if (post) {\n      const { _id, user } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return (\n    <WriteActionButtons\n      onPublish={onPublish}\n      onCancel={onCancel}\n      isEdit={!!originalPostId}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import React from 'react';\nimport Responsive from '../../components/common/Responsive';\nimport EditorContainer from '../../containers/write/EditorContainer';\nimport TagBoxContainer from '../../containers/write/TagBoxContainer';\nimport WriteActionButtonsContainer from '../../containers/write/WriteActionButtonsContainer';\nimport { Helmet } from 'react-helmet-async';\n\nconst WritePage = () => {\n  return (\n    <Responsive>\n      <Helmet>\n        <title>글 작성하기 - REACTERS</title>\n      </Helmet>\n\n      <EditorContainer />\n      <TagBoxContainer />\n      <WriteActionButtonsContainer />\n    </Responsive>\n  );\n};\n\nexport default WritePage;\n","import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, {\n  createRequestActionTypes,\n} from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\n\nconst [\n  READ_POST,\n  READ_POST_SUCCESS,\n  READ_POST_FAILURE,\n] = createRequestActionTypes('post/READ_POST');\nconst UNLOAD_POST = 'post/UNLOAD_POST'; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const readPost = createAction(READ_POST, id => id);\nexport const unloadPost = createAction(UNLOAD_POST);\n\nconst readPostSaga = createRequestSaga(READ_POST, postsAPI.readPost);\nexport function* postSaga() {\n  yield takeLatest(READ_POST, readPostSaga);\n}\n\nconst initialState = {\n  post: null,\n  error: null,\n};\n\nconst post = handleActions(\n  {\n    [READ_POST_SUCCESS]: (state, { payload: post }) => ({\n      ...state,\n      post,\n    }),\n    [READ_POST_FAILURE]: (state, { payload: error }) => ({\n      ...state,\n      error,\n    }),\n    [UNLOAD_POST]: () => initialState,\n  },\n  initialState,\n);\n\nexport default post;\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport { Helmet } from 'react-helmet-async';\n\nconst PostViewerBlock = styled(Responsive)`\n  margin-top: 4rem;\n`;\nconst PostHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\n\nconst PostContent = styled.div`\n  font-size: 1.3125rem;\n  color: ${palette.gray[8]};\n`;\n\nconst PostViewer = ({ post, error, loading, actionButtons, ownPost }) => {\n  // 에러 발생 시\n  if (error) {\n    if (error.response && error.response.status === 404) {\n      return <PostViewerBlock>존재하지 않는 포스트입니다.</PostViewerBlock>;\n    }\n    return <PostViewerBlock>오류 발생!</PostViewerBlock>;\n  }\n\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\n  if (loading || !post) {\n    return null;\n  }\n\n  const { title, body, user, publishedDate, tags } = post;\n  return (\n    <PostViewerBlock>\n      <Helmet>\n        <title>{title} - REACTERS</title>\n      </Helmet>\n\n      <PostHead>\n        <h1>{title}</h1>\n        <SubInfo\n          username={user.username}\n          publishedDate={publishedDate}\n          hasMarginTop\n        />\n        <Tags tags={tags} />\n      </PostHead>\n      {actionButtons}\n      <PostContent dangerouslySetInnerHTML={{ __html: body }} />\n    </PostViewerBlock>\n  );\n};\n\nexport default PostViewer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from './Button';\n\nconst Fullscreen = styled.div`\n  position: fixed;\n  z-index: 30;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.25);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst AskModalBlock = styled.div`\n  width: 320px;\n  background: white;\n  padding: 1.5rem;\n  border-radius: 4px;\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\n  h2 {\n    margin-top: 0;\n    margin-bottom: 1rem;\n  }\n  p {\n    margin-bottom: 3rem;\n  }\n  .buttons {\n    display: flex;\n    justify-content: flex-end;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  height: 2rem;\n  & + & {\n    margin-left: 0.75rem;\n  }\n`;\n\nconst AskModal = ({\n  visible,\n  title,\n  description,\n  confirmText = '확인',\n  cancelText = '취소',\n  onConfirm,\n  onCancel,\n}) => {\n  if (!visible) return null;\n  return (\n    <Fullscreen>\n      <AskModalBlock>\n        <h2>{title}</h2>\n        <p>{description}</p>\n        <div className=\"buttons\">\n          <StyledButton onClick={onCancel}>{cancelText}</StyledButton>\n          <StyledButton cyan onClick={onConfirm}>\n            {confirmText}\n          </StyledButton>\n        </div>\n      </AskModalBlock>\n    </Fullscreen>\n  );\n};\n\nexport default AskModal;\n","import React from 'react';\nimport AskModal from '../common/AskModal';\n\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\n  return (\n    <AskModal\n      visible={visible}\n      title=\"포스트 삭제\"\n      description=\"포스트를 정말 삭제하시겠습니까?\"\n      confirmText=\"삭제\"\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n    />\n  );\n};\n\nexport default AskRemoveModal;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport AskRemoveModal from './AskRemoveModal';\n\nconst PostActionButtonsBlock = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 2rem;\n  margin-top: -1.5rem;\n`;\n\nconst ActionButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palette.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palette.gray[1]};\n    color: ${palette.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst PostActionButtons = ({ onEdit, onRemove }) => {\n  const [modal, setModal] = useState(false);\n  const onRemoveClick = () => {\n    setModal(true);\n  };\n  const onCancel = () => {\n    setModal(false);\n  };\n  const onConfirm = () => {\n    setModal(false);\n    onRemove();\n  };\n\n  return (\n    <>\n      <PostActionButtonsBlock>\n        <ActionButton onClick={onEdit}>수정</ActionButton>\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\n      </PostActionButtonsBlock>\n      <AskRemoveModal\n        visible={modal}\n        onConfirm={onConfirm}\n        onCancel={onCancel}\n      />\n    </>\n  );\n};\n\nexport default PostActionButtons;\n","export default __webpack_public_path__ + \"static/media/invoice.d1e34567.png\";","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\n\nconst PostViewerContainer = ({ match, history }) => {\n  // 처음 마운트될 때 포스트 읽기 API 요청\n  const { postId } = match.params;\n  const dispatch = useDispatch();\n  const { post, error, loading, user } = useSelector(\n    ({ post, loading, user }) => ({\n      post: post.post,\n      error: post.error,\n      loading: loading['post/READ_POST'],\n      user: user.user,\n    }),\n  );\n\n  useEffect(() => {\n    dispatch(readPost(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/'); // 홈으로 이동\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const ownPost = (user && user._id) === (post && post.user._id);\n\n  return (\n    <PostViewer\n      post={post}\n      loading={loading}\n      error={error}\n      actionButtons={\n        ownPost && <PostActionButtons onEdit={onEdit} onRemove={onRemove} />\n      }\n    />\n  );\n};\n\nexport default withRouter(PostViewerContainer);\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Button from '../common/Button';\r\nimport InvoiceImng from '../../assets/invoice.png';\r\n\r\nconst Fullscreen = styled.div`\r\n  position: fixed;\r\n  z-index: 30;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.25);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nconst AskModalBlock = styled.div`\r\n  background : white;\r\n  padding: 1.5rem;\r\n  border-radius: 4px;\r\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.125);\r\n  h2 {\r\n    margin-top: 0;\r\n    margin-bottom: 1rem;\r\n  }\r\n  p {\r\n    margin-bottom: 3rem;\r\n  }\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  height: 2rem;\r\n  & + & {\r\n    margin-left: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst onPrint = () => {\r\n    window.print();\r\n};\r\n\r\nconst CustomerInvoice = ({visible, onCancel, name, contactNumber, address}) => {\r\n    if (!visible) return null;\r\n    return (\r\n        <Fullscreen>\r\n            <AskModalBlock>\r\n                <div >\r\n                    <div style={{position:'relative'}}>\r\n                        <img src={ InvoiceImng } alt=\"송장이미지\"/>\r\n                    </div>\r\n                    <div style={{\r\n                    top: '61%',\r\n                    left: '40%',\r\n                    bottom: '140px',\r\n                    fontSize: '1.0em',\r\n                    fontWeight: 'bold',\r\n                    position: 'absolute'}}>\r\n                        <div style={{ marginBottom : '0.8rem'}}>\r\n                            {name}\r\n                        </div>\r\n                        <div style={{ marginBottom : '0.8rem'}}>\r\n                            {address}\r\n                        </div>\r\n                        <div style={{ marginBottom : '0.8rem'}}> \r\n                            {contactNumber}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <p></p>\r\n                <StyledButton onClick={onPrint}>출력</StyledButton>\r\n                <StyledButton onClick={onCancel}>취소</StyledButton>\r\n            </AskModalBlock>\r\n        </Fullscreen>\r\n    );\r\n  };\r\n  \r\n  export default CustomerInvoice;\r\n  ","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Responsive from '../common/Responsive';\r\nimport Button from '../common/Button';\r\nimport palette from '../../lib/styles/palette';\r\nimport SubInfo from '../common/SubInfo';\r\nimport Tags from '../common/Tags';\r\nimport CustomerInvoice from './CustomerInvoice';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CustomerListBlock = styled(Responsive)`\r\n  margin-top: 3rem;\r\n`;\r\n\r\nconst WriteCustomerButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-bottom: 3rem;\r\n`;\r\n\r\nconst CustomerItemBlock = styled.div`\r\n  padding-top: 1.5rem;\r\n  padding-bottom: 1.5rem;\r\n  /* 맨 위 포스트는 padding-top 없음 */\r\n  &:first-child {\r\n    padding-top: 0;\r\n  }\r\n  & + & {\r\n    border-top: 1px solid ${palette.gray[2]};\r\n  }\r\n\r\n  h2 {\r\n    font-size: 2rem;\r\n    margin-bottom: 0;\r\n    margin-top: 0;\r\n    &:hover {\r\n      color: ${palette.gray[6]};\r\n    }\r\n  }\r\n  p {\r\n    margin-top: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n  font-size: 1.0rem;\r\n  outline: none;\r\n  border: none;\r\n  border-bottom: 1px solid ${palette.gray[4]};\r\n`;\r\n\r\n\r\n\r\nconst CustomerItem = ({ customer}) => {\r\n  const [modal, setModal] = useState(false);\r\n  const onInvoiceClick = () => {\r\n    setModal(true);\r\n  };\r\n  const onCancel = () => {\r\n    setModal(false);\r\n  };\r\n\r\n\r\n\r\n  const { publishedDate, user, name, contactNumber, advancedNumber, address, extra, _id } = customer;\r\n  return (\r\n    <CustomerItemBlock>\r\n      <h2>\r\n        <Link to={`/@${user.username}/${_id}`}>{name}</Link>\r\n      </h2>\r\n      <SubInfo\r\n        username={user.username}\r\n        publishedDate={new Date(publishedDate)}\r\n      />\r\n      <Tags tags={extra} />\r\n      <p>주소 : {address}</p>\r\n      <p>연락처 : {contactNumber}</p>\r\n      <Button onClick={onInvoiceClick}>송장 출력</Button>\r\n      <CustomerInvoice\r\n        visible={modal}\r\n        onCancel={onCancel}\r\n        name={name}\r\n        contactNumber={contactNumber}\r\n        address={address}\r\n      />\r\n    </CustomerItemBlock>\r\n  );\r\n};\r\n\r\n\r\nconst CustomerList = ({ customers, loading, error, showWriteButton,  }) => {\r\n  const onChangeSearch = (e) => {\r\n    console.log(e.target.value);\r\n    let nextState = {};\r\n    nextState[e.target.name] = e.target.value;\r\n    this.setState(nextState);\r\n  }\r\n\r\n  // 에러 발생 시\r\n  if (error) {\r\n    return <CustomerListBlock>에러가 발생했습니다.</CustomerListBlock>;\r\n  }\r\n\r\n  return (\r\n    <CustomerListBlock>\r\n      <WriteCustomerButtonWrapper>\r\n        <SearchInput\r\n          name=\"searchKeyword\"\r\n          placeholder=\"검색어를 입력하세요\"\r\n          onChange={onChangeSearch}\r\n        >\r\n          \r\n        </SearchInput>\r\n        {showWriteButton && (\r\n          <Button cyan to=\"/customerRegister\">\r\n            유저 등록하기\r\n          </Button>\r\n        )}\r\n      </WriteCustomerButtonWrapper>\r\n      {/*  로딩 중 아니고, 포스트 배열이 존재할 때만 보여줌 */}\r\n      {!loading && customers && (\r\n        <div>\r\n          {customers.map(customer => (\r\n            <CustomerItem customer={customer} key={customer._id} />\r\n          ))}\r\n          \r\n        </div>\r\n      )\r\n      }\r\n    </CustomerListBlock>\r\n  );\r\n};\r\n\r\nexport default CustomerList;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as customerAPI from '../lib/api/customers';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  LIST_CUSTOMERS,\r\n  LIST_CUSTOMERS_SUCCESS,\r\n  LIST_CUSTOMERS_FAILURE,\r\n] = createRequestActionTypes('customers/LIST_CUSTOMERS');\r\n\r\nexport const listCustomers = createAction(\r\n  LIST_CUSTOMERS,\r\n  ({ extra, username, page }) => ({ extra, username, page }),\r\n);\r\n\r\nconst listCustomersSaga = createRequestSaga(LIST_CUSTOMERS, customerAPI.listCustomers);\r\nexport function* customersSaga() {\r\n  yield takeLatest(LIST_CUSTOMERS, listCustomersSaga);\r\n}\r\n\r\nconst initialState = {\r\n  customers: null,\r\n  error: null,\r\n  lastPage: 1,\r\n};\r\n\r\nconst customers = handleActions(\r\n  {\r\n    [LIST_CUSTOMERS_SUCCESS]: (state, { payload: customers, meta: response }) => ({\r\n      ...state,\r\n      customers,\r\n      lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\r\n    }),\r\n    [LIST_CUSTOMERS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default customers;\r\n","import qs from 'qs';\r\nimport client from './client';\r\n\r\nexport const registerCustomer = ({ name, contactNumber, address, advancedPayment, extra }) =>\r\n  client.post('/api/customers', { name, contactNumber, address, advancedPayment, extra  });\r\n\r\nexport const readCustomer = id => client.get(`/api/customers/${id}`);\r\n\r\nexport const listCustomers = ({ page, username, tag }) => {\r\n  const queryString = qs.stringify({\r\n    page,\r\n    username,\r\n    tag,\r\n  });\r\n  return client.get(`/api/customers?${queryString}`);\r\n};\r\n\r\nexport const updateCustomer = ({ id, name, contactNumber, address, advancedPayment, extra  }) =>\r\n  client.patch(`/api/customers/${id}`, {\r\n    name,\r\n    contactNumber, \r\n    address, \r\n    advancedPayment,\r\n    extra \r\n  });\r\n\r\nexport const removeCustomer = id => client.delete(`/api/customers/${id}`);\r\n","import React, { useEffect } from 'react';\r\nimport qs from 'qs';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport CustomerList from '../../components/customers/CustomerList';\r\nimport { listCustomers } from '../../modules/customers';\r\n\r\nconst CustomerListContainer = ({ location, match }) => {\r\n  const dispatch = useDispatch();\r\n  const { customers, error, loading, user } = useSelector(\r\n    ({ customers, loading, user }) => ({\r\n      customers: customers.customers,\r\n      error: customers.error,\r\n      loading: loading['customers/LIST_CUSTOMERS'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n  useEffect(() => {\r\n    const { username } = match.params;\r\n    const { extra, page } = qs.parse(location.search, {\r\n      ignoreQueryPrefix: true,\r\n    });\r\n    dispatch(listCustomers({ extra, username, page }));\r\n  }, [dispatch, location.search, match.params]);\r\n\r\n  return (\r\n    <CustomerList\r\n      loading={loading}\r\n      error={error}\r\n      customers={customers}\r\n      showWriteButton={user}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(CustomerListContainer);\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport qs from 'qs';\nimport Button from '../common/Button';\n\nconst PaginationBlock = styled.div`\n  width: 320px;\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 3rem;\n`;\nconst PageNumber = styled.div``;\n\nconst buildLink = ({ username, tag, page }) => {\n  const query = qs.stringify({ tag, page });\n  return username ? `/@${username}?${query}` : `/?${query}`;\n};\n\nconst Pagination = ({ page, lastPage, username, tag }) => {\n  return (\n    <PaginationBlock>\n      <Button\n        disabled={page === 1}\n        to={\n          page === 1 ? undefined : buildLink({ username, tag, page: page - 1 })\n        }\n      >\n        이전\n      </Button>\n      <PageNumber>{page}</PageNumber>\n      <Button\n        disabled={page === lastPage}\n        to={\n          page === lastPage\n            ? undefined\n            : buildLink({ username, tag, page: page + 1 })\n        }\n      >\n        다음\n      </Button>\n    </PaginationBlock>\n  );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport Pagination from '../../components/customers/Pagination';\nimport { useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport qs from 'qs';\n\nconst PaginationContainer = ({ location, match }) => {\n  const { lastPage, customers, loading } = useSelector(({ customers, loading }) => ({\n    lastPage: customers.lastPage,\n    customers: customers.customers,\n    loading: loading['customers/LIST_CUSTOMERS'],\n  }));\n\n  // 포스트 데이터가 없거나 로딩 중이면 아무것도 보여주지 않음\n  if (!customers || loading) return null;\n\n  const { username } = match.params;\n\n  // page가 없으면 1을 기본값으로 사용\n  const { tag, page = 1 } = qs.parse(location.search, {\n    ignoreQueryPrefix: true,\n  });\n\n  return (\n    <Pagination\n      tag={tag}\n      username={username}\n      page={parseInt(page, 10)}\n      lastPage={lastPage}\n    />\n  );\n};\n\nexport default withRouter(PaginationContainer);\n","import React from 'react';\r\nimport HeaderContainer from '../../containers/common/HeaderContainer';\r\nimport CustomerListContainer from '../../containers/customers/CustomerListContainer';\r\nimport PaginationContainer from '../../containers/customers/PaginationContainer';\r\n\r\nconst PostListPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <CustomerListContainer />\r\n      <PaginationContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostListPage;\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\n\nconst EditorBlock = styled(Responsive)`\n  /* 페이지 위 아래 여백 지정 */\n  padding-top: 5rem;\n  padding-bottom: 1.5rem;\n`;\nconst TitleInput = styled.input`\n  font-size: 1.5rem;\n  outline: none;\n  padding-bottom: 0.5rem;\n  border: none;\n  border-bottom: 1px solid ${palette.gray[4]};\n  margin-bottom: 2rem;\n  width: 100%;\n`;\n// const QuillWrapper = styled.div`\n//   /* 최소 크기 지정 및 padding 제거 */\n//   .ql-editor {\n//     padding: 0;\n//     min-height: 320px;\n//     font-size: 1.125rem;\n//     line-height: 1.5;\n//   }\n//   .ql-editor.ql-blank::before {\n//     left: 0px;\n//   }\n// `;\n\nconst Editor = ({ name, contactNumber, address, advancedPayment, onChangeField }) => {\n \n  const onChangeName = e => {\n    onChangeField({ key: 'name', value: e.target.value });\n  };\n  const onChangeAddress = e => {\n    onChangeField({ key: 'address', value: e.target.value });\n  };\n\n  const onChangeContactNumber = e => {\n    onChangeField({ key: 'contactNumber', value: e.target.value });\n  };\n  \n  const onChangeAdvancedPayment = e => {\n    const re = /^[0-9\\b]+$/;\n\n    if(e.target.value === \"\" || re.test(e.target.value)) {\n      onChangeField({ key: 'advancedPayment', value: e.target.value });\n    }\n    e.target.value=\"\";\n  };\n\n  return (\n    <EditorBlock>\n      <TitleInput\n        placeholder=\"이름을 입력하세요\"\n        onChange={onChangeName}\n        value={name}\n      />\n     <TitleInput\n        placeholder=\"핸드폰 번호를 입력하세요\"\n        onChange={onChangeContactNumber}\n        value={contactNumber}\n      />\n      <TitleInput\n        placeholder=\"주소을 입력하세요\"\n        onChange={onChangeAddress}\n        value={address}\n      />\n      <TitleInput\n        placeholder=\"선급금을 입력하세요\"\n        onChange={onChangeAdvancedPayment}\n        value={advancedPayment}\n      />\n      {/* <QuillWrapper>\n        <div ref={quillElement} /> \n      </QuillWrapper> */}\n    </EditorBlock>\n  );\n};\n\nexport default Editor;\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as customersAPI from '../lib/api/customers';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'register/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'register/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n  REGISTER_CUTOMER,\r\n  REGISTER_CUTOMER_SUCCESS,\r\n  REGISTER_CUTOMER_FAILURE,\r\n] = createRequestActionTypes('register/REGISTER_CUTOMER'); // 고객 등록\r\nconst SET_ORIGINAL_CUSTOMER = 'register/SET_ORIGINAL_CUSTOMER';\r\nconst [\r\n  UPDATE_CUSTOMER,\r\n  UPDATE_CUSTOMER_SUCCESS,\r\n  UPDATE_CUSTOMER_FAILURE,\r\n] = createRequestActionTypes('register/UPDATE_CUSTOMER'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const registerCustomer = createAction(REGISTER_CUTOMER, ({ name, contactNumber, address, advancedPayment, extra }) => ({\r\n  name, \r\n  contactNumber, \r\n  address, \r\n  advancedPayment,\r\n  extra,\r\n}));\r\nexport const setOriginalCustomer = createAction(SET_ORIGINAL_CUSTOMER, customer => customer);\r\nexport const updateCustomer = createAction(\r\n  UPDATE_CUSTOMER,\r\n  ({ id, name, contactNumber, address, advancedPayment,extra }) => ({\r\n    id,\r\n    name, \r\n    contactNumber, \r\n    address,\r\n    advancedPayment,\r\n    extra,\r\n    \r\n  }),\r\n);\r\n\r\n// saga 생성\r\nconst registerCustomerSaga = createRequestSaga(REGISTER_CUTOMER, customersAPI.registerCustomer);\r\nconst updateCustomerSaga = createRequestSaga(UPDATE_CUSTOMER, customersAPI.updateCustomer);\r\n\r\nexport function* registerSaga() {\r\n  yield takeLatest(REGISTER_CUTOMER, registerCustomerSaga);\r\n  yield takeLatest(UPDATE_CUSTOMER, updateCustomerSaga);\r\n}\r\n\r\nconst initialState = {\r\n  name : '',\r\n  contactNumber : '',\r\n  address : '',\r\n  advancedPayment : 0,\r\n  extra : [],\r\n  customer: null,\r\n  customerError: null,\r\n  originalCustomerId: null,\r\n};\r\n\r\nconst register = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [REGISTER_CUTOMER]: state => ({\r\n      ...state,\r\n      // customer와 customerError를 초기화\r\n      customer: null,\r\n      customerError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [REGISTER_CUTOMER_SUCCESS]: (state, { payload: customer }) => ({\r\n      ...state,\r\n      customer,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [REGISTER_CUTOMER_FAILURE]: (state, { payload: customerError }) => ({\r\n      ...state,\r\n      customerError,\r\n    }),\r\n    [SET_ORIGINAL_CUSTOMER]: (state, { payload: customer }) => ({\r\n      ...state,\r\n      name: customer.name,\r\n      contactNumber : customer.contactNumber,\r\n      address: customer.address,\r\n      advancedPayment : customer.advancedPayment,\r\n      extra: customer.extra,\r\n      originalCustomerId: customer._id,\r\n    }),\r\n    [UPDATE_CUSTOMER_SUCCESS]: (state, { payload: customer }) => ({\r\n      ...state,\r\n      customer,\r\n    }),\r\n    [UPDATE_CUSTOMER_FAILURE]: (state, { payload: customerError }) => ({\r\n      ...state,\r\n      customerError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default register;\r\n","import React, { useEffect, useCallback } from 'react';\nimport Editor from '../../components/register/Editor';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeField, initialize } from '../../modules/register';\n\nconst EditorContainer = () => {\n  const dispatch = useDispatch();\n  const { name, contactNumber, address, advancedPayment } = useSelector(({ register }) => ({\n    name: register.name,\n    contactNumber: register.contactNumber,\n    address : register.address,\n    advancedPayment : register.advancedPayment\n  }));\n  const onChangeField = useCallback(payload => dispatch(changeField(payload)), [\n    dispatch,\n  ]);\n  // 언마운트될 때 초기화\n  useEffect(() => {\n    return () => {\n      dispatch(initialize());\n    };\n  }, [dispatch]);\n  return <Editor onChangeField={onChangeField} name={name} contactNumber={contactNumber} address={address} advancedPayment={advancedPayment}/>;\n};\n\nexport default EditorContainer;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\nconst TagBoxBlock = styled.div`\n  width: 100%;\n  border-top: 1px solid ${palette.gray[2]};\n  padding-top: 2rem;\n\n  h4 {\n    color: ${palette.gray[8]}\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst TagForm = styled.form`\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  width: 256px;\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\n  input,\n  button {\n    outline: none;\n    border: none;\n    font-size: 1rem;\n  }\n\n  input {\n    padding: 0.5rem;\n    flex: 1;\n  }\n  button {\n    cursor: pointer;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    border: none;\n    background: ${palette.gray[8]};\n    color: white;\n    font-weight: bold;\n    &:hover {\n      background: ${palette.gray[6]};\n    }\n  }\n`;\n\nconst Tag = styled.div`\n  margin-right: 0.5rem;\n  color: ${palette.gray[6]};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst TagListBlock = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`;\n\n// React.memo를 사용하여 extra 값이 바뀔 때만 리렌더링되도록 처리\nconst TagItem = React.memo(({ extra, onRemove, onChangeTags }) => (\n  <Tag onClick={() => onRemove(extra)}>#{extra}</Tag>\n));\n\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\nconst TagList = React.memo(({ extra, onRemove }) => (\n  <TagListBlock>\n    {extra.map(extra => (\n      <TagItem key={extra} extra={extra} onRemove={onRemove} />\n    ))}\n  </TagListBlock>\n));\n\nconst TagBox = ({ extra, onChangeTags }) => {\n  const [input, setInput] = useState('');\n  const [localTags, setLocalTags] = useState([]);\n\n  const insertTag = useCallback(\n    extra => {\n      if (!extra) return; // 공백이라면 추가하지 않음\n      if (localTags.includes(extra)) return; // 이미 존재한다면 추가하지 않음\n      const nextTags = [...localTags, extra];\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onRemove = useCallback(\n    extra => {\n      const nextTags = localTags.filter(t => t !== extra);\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onChange = useCallback(e => {\n    setInput(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\n      setInput(''); // input 초기화\n    },\n    [input, insertTag],\n  );\n\n  // tags 값이 바뀔 때\n  useEffect(() => {\n    setLocalTags(extra);\n  }, [extra]);\n\n  return (\n    <TagBoxBlock>\n      <h4>태그</h4>\n      <TagForm onSubmit={onSubmit}>\n        <input\n          placeholder=\"태그를 입력하세요\"\n          value={input}\n          onChange={onChange}\n        />\n        <button type=\"submit\">추가</button>\n      </TagForm>\n      <TagList extra={localTags} onRemove={onRemove} />\n    </TagBoxBlock>\n  );\n};\n\nexport default TagBox;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TagBox from '../../components/register/TagBox';\nimport { changeField } from '../../modules/register';\n\nconst TagBoxContainer = () => {\n  const dispatch = useDispatch();\n  const extra = useSelector(state => state.register.extra);\n\n  const onChangeTags = nextTags => {\n    dispatch(\n      changeField({\n        key: 'extra',\n        value: nextTags,\n      }),\n    );\n  };\n\n  return <TagBox onChangeTags={onChangeTags} extra={extra} />;\n};\n\nexport default TagBoxContainer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Button from '../common/Button';\n\nconst WriteActionButtonsBlock = styled.div`\n  margin-top: 1rem;\n  margin-bottom: 3rem;\n  button + button {\n    margin-left: 0.5rem;\n  }\n`;\n\n/* TagBox에서 사용하는 버튼과 일치하는 높이로 설정 후 서로 간의 여백 지정 */\nconst StyledButton = styled(Button)`\n  height: 2.125rem;\n  & + & {\n    margin-left: 0.5rem;\n  }\n`;\n\nconst WriteActionButtons = ({ onCancel, onPublish, isEdit }) => {\n  return (\n    <WriteActionButtonsBlock>\n      <StyledButton cyan onClick={onPublish}>\n        고객 {isEdit ? '수정' : '등록'}\n      </StyledButton>\n      <StyledButton onClick={onCancel}>취소</StyledButton>\n    </WriteActionButtonsBlock>\n  );\n};\n\nexport default WriteActionButtons;\n","import React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/register/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { registerCustomer, updateCustomer } from '../../modules/register';\n\nconst WriteActionButtonsContainer = ({ history }) => {\n  const dispatch = useDispatch();\n  const { name, contactNumber, address, advancedPayment, extra, customer, customerError, originalCustomerId } = useSelector(\n    ({ register }) => ({\n      name: register.name,\n      contactNumber: register.contactNumber,\n      address : register.address,\n      advancedPayment : register.advancedPayment,\n      extra: register.extra,\n      customer: register.customer,\n      customerError: register.customerError,\n      originalCustomerId: register.originalCustomerId,\n    }),\n  );\n\n  // 고객 등록\n  const onPublish = () => {\n    if (originalCustomerId) {\n      console.log(\"originalCustomerId\"+originalCustomerId)\n      dispatch(updateCustomer({ name, contactNumber, address, advancedPayment, extra, id: originalCustomerId }));\n      return;\n    }\n    dispatch(\n      registerCustomer({\n        name,\n        contactNumber,\n        address,\n        advancedPayment,\n        extra,\n      }),\n    );\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패시 할 작업\n  useEffect(() => {\n    if (customer) {\n      const { _id, user } = customer;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (customerError) {\n      console.log(customerError);\n    }\n  }, [history, customer, customerError]);\n  return (\n    <WriteActionButtons\n      onPublish={onPublish}\n      onCancel={onCancel}\n      isEdit={!!originalCustomerId}\n    />\n  );\n};\n\nexport default withRouter(WriteActionButtonsContainer);\n","import React from 'react';\r\nimport Responsive from '../../components/common/Responsive';\r\nimport EditorContainer from '../../containers/register/EditorContainer';\r\nimport TagBoxContainer from '../../containers/register/TagBoxContainer';\r\nimport WriteActionButtonsContainer from '../../containers/register/WriteActionButtonsContainer';\r\nimport { Helmet } from 'react-helmet-async';\r\n\r\nconst CustomerRegisterPage = () => {\r\n  return (\r\n    <Responsive>\r\n      <Helmet>\r\n        <title>고객 등록하기 - WINEUS</title>\r\n      </Helmet>\r\n\r\n      <EditorContainer />\r\n      <TagBoxContainer />\r\n      <WriteActionButtonsContainer />\r\n    </Responsive>\r\n  );\r\n};\r\n\r\nexport default CustomerRegisterPage;\r\n","import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as customersAPI from '../lib/api/customers';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  READ_CUSTOMER,\r\n  READ_CUSTOMER_SUCCESS,\r\n  READ_CUSTOMER_FAILURE,\r\n] = createRequestActionTypes('customer/READ_CUSTOMER');\r\nconst UNLOAD_CUSTOMER = 'customer/UNLOAD_CUSTOMER'; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const readCustomer = createAction(READ_CUSTOMER, id => id);\r\nexport const unloadCustomer = createAction(UNLOAD_CUSTOMER);\r\n\r\nconst readCustomerSaga = createRequestSaga(READ_CUSTOMER, customersAPI.readCustomer);\r\nexport function* customerSaga() {\r\n  yield takeLatest(READ_CUSTOMER, readCustomerSaga);\r\n}\r\n\r\nconst initialState = {\r\n  customer: null,\r\n  error: null,\r\n};\r\n\r\nconst customer = handleActions(\r\n  {\r\n    [READ_CUSTOMER_SUCCESS]: (state, { payload: customer }) => ({\r\n      ...state,\r\n      customer,\r\n    }),\r\n    [READ_CUSTOMER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [UNLOAD_CUSTOMER]: () => initialState,\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default customer;\r\n","import React from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport Responsive from '../common/Responsive';\nimport SubInfo from '../common/SubInfo';\nimport Tags from '../common/Tags';\nimport { Helmet } from 'react-helmet-async';\n\nconst CustomerViewerBlock = styled(Responsive)`\n  margin-top: 4rem;\n`;\nconst CustomerHead = styled.div`\n  border-bottom: 1px solid ${palette.gray[2]};\n  padding-bottom: 3rem;\n  margin-bottom: 3rem;\n  h1 {\n    font-size: 3rem;\n    line-height: 1.5;\n    margin: 0;\n  }\n`;\n\nconst CustomerContent = styled.div`\n  margin-bottom : 1.5rem;\n  font-size: 1.3125rem;\n  color: ${palette.gray[8]};\n`;\n\nconst CustomerViewer = ({ customer, error, loading, actionButtons, ownCustomer }) => {\n  // 에러 발생 시\n  if (error) {\n    if (error.response && error.response.status === 404) {\n      return <CustomerViewerBlock>존재하지 않는 포스트입니다.</CustomerViewerBlock>;\n    }\n    return <CustomerViewerBlock>오류 발생!</CustomerViewerBlock>;\n  }\n\n  // 로딩중이거나, 아직 포스트 데이터가 없을 시\n  if (loading || !customer) {\n    return null;\n  }\n\n  const { name, contactNumber, address, advancedPayment, user, publishedDate, extra } = customer;\n  return (\n    <CustomerViewerBlock>\n      <Helmet>\n        <title>{name} - WINEUS</title>\n      </Helmet>\n\n      <CustomerHead>\n        <h1>{name}</h1>\n        <SubInfo\n          username={user.username}\n          publishedDate={publishedDate}\n          hasMarginTop\n        />\n        <Tags tags={extra} />\n        \n      주소 : <CustomerContent dangerouslySetInnerHTML={{ __html: address }}  />\n      연락처 : <CustomerContent dangerouslySetInnerHTML={{ __html: contactNumber }} />\n      남은 선급금 : {advancedPayment}\n      </CustomerHead>\n      {actionButtons}\n    </CustomerViewerBlock>\n  );\n};\n\nexport default CustomerViewer;\n","import React from 'react';\nimport AskModal from '../common/AskModal';\n\nconst AskRemoveModal = ({ visible, onConfirm, onCancel }) => {\n  return (\n    <AskModal\n      visible={visible}\n      title=\"고객 삭제\"\n      description=\"고객을 정말 삭제하시겠습니까?\"\n      confirmText=\"삭제\"\n      onConfirm={onConfirm}\n      onCancel={onCancel}\n    />\n  );\n};\n\nexport default AskRemoveModal;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nimport AskRemoveModal from './AskRemoveModal';\n\nconst CustomerActionButtonsBlock = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 2rem;\n  margin-top: -1.5rem;\n`;\n\nconst ActionButton = styled.button`\n  padding: 0.25rem 0.5rem;\n  border-radius: 4px;\n  color: ${palette.gray[6]};\n  font-weight: bold;\n  border: none;\n  outline: none;\n  font-size: 0.875rem;\n  cursor: pointer;\n  &:hover {\n    background: ${palette.gray[1]};\n    color: ${palette.cyan[7]};\n  }\n  & + & {\n    margin-left: 0.25rem;\n  }\n`;\n\nconst CustomerActionButtons = ({ onEdit, onRemove }) => {\n  const [modal, setModal] = useState(false);\n  const onRemoveClick = () => {\n    setModal(true);\n  };\n  const onCancel = () => {\n    setModal(false);\n  };\n  const onConfirm = () => {\n    setModal(false);\n    onRemove();\n  };\n\n  return (\n    <>\n      <CustomerActionButtonsBlock>\n        <ActionButton onClick={onEdit}>수정</ActionButton>\n        <ActionButton onClick={onRemoveClick}>삭제</ActionButton>\n      </CustomerActionButtonsBlock>\n      <AskRemoveModal\n        visible={modal}\n        onConfirm={onConfirm}\n        onCancel={onCancel}\n      />\n    </>\n  );\n};\n\nexport default CustomerActionButtons;\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readCustomer, unloadCustomer } from '../../modules/customer';\r\nimport CustomerViewer from '../../components/customer/CustomerViewer';\r\nimport CustomerActionButtons from '../../components/customer/CustomerActionButtons';\r\nimport { setOriginalCustomer } from '../../modules/register';\r\nimport { removeCustomer } from '../../lib/api/customers';\r\n\r\nconst CustomerViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const { customerId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { customer, error, loading, user } = useSelector(\r\n    ({ customer, loading, user }) => ({\r\n      customer: customer.customer,\r\n      error: customer.error,\r\n      loading: loading['customer/READ_CUSTOMER'],\r\n      user: user.user,\r\n    }),\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(readCustomer(customerId));\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadCustomer());\r\n    };\r\n  }, [dispatch, customerId]);\r\n\r\n  const onEdit = () => {\r\n    dispatch(setOriginalCustomer(customer));\r\n    history.push('/customerRegister');\r\n  };\r\n\r\n  const onRemove = async () => {\r\n    try {\r\n      await removeCustomer(customerId);\r\n      history.push('/'); // 홈으로 이동\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const ownCustomer = (user && user._id) === (customer && customer.user._id);\r\n\r\n  return (\r\n    <CustomerViewer\r\n      customer={customer}\r\n      loading={loading}\r\n      error={error}\r\n      actionButtons={\r\n        ownCustomer && <CustomerActionButtons onEdit={onEdit} onRemove={onRemove} />\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(CustomerViewerContainer);\r\n","import React from 'react';\r\nimport HeaderContainer from '../../containers/common/HeaderContainer';\r\nimport CustomerViewerContainer from '../../containers/customer/CustomerViewerContainer';\r\n\r\nconst CustomerPage = () => {\r\n  return (\r\n    <>\r\n      <HeaderContainer />\r\n      <CustomerViewerContainer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomerPage;\r\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport PostListPage from './pages/post/PostListPage';\nimport LoginPage from './pages/auth/LoginPage';\nimport RegisterPage from './pages/auth/RegisterPage';\nimport WritePage from './pages/post/WritePage';\nimport PostPage from './pages/post/PostPage';\nimport CustomerListPage from './pages/customer/CustomerListPage';\nimport CustomerRegisterPage from './pages/customer/CustomerRegisterPage';\nimport CustomerPage from './pages/customer/CustomerPage';\nimport { Helmet } from 'react-helmet-async';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>REACTERS</title>\n      </Helmet>\n\n      {/* <Route component={PostListPage} path={['/@:username', '/']} exact /> */}\n      <Route component={LoginPage} path=\"/login\" />\n      <Route component={RegisterPage} path=\"/register\" />\n      <Route component={WritePage} path=\"/write\" />\n      {/* <Route component={PostPage} path=\"/@:username/:postId\" /> */}\n      <Route component={CustomerListPage} path={['/@:username', '/']} exact/>\n      <Route component={CustomerRegisterPage} path=\"/customerRegister\" />\n      <Route component={CustomerPage} path=\"/@:username/:customerId\" />\n    </>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport { all } from 'redux-saga/effects';\nimport auth, { authSaga } from './auth';\nimport loading from './loading';\nimport user, { userSaga } from './user';\nimport write, { writeSaga } from './write';\nimport post, { postSaga } from './post';\nimport posts, { postsSaga } from './posts';\nimport customers, { customersSaga } from './customers';\nimport customer, { customerSaga } from './customer';\nimport register, { registerSaga } from './register';\n\nconst rootReducer = combineReducers({\n  auth,\n  loading,\n  user,\n  write,\n  post,\n  posts,\n  customers,\n  customer,\n  register,\n});\n\nexport function* rootSaga() {\n  yield all([authSaga(), userSaga(), writeSaga(), postSaga(), postsSaga(), customersSaga(), registerSaga(), customerSaga()]);\n}\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './modules';\nimport { tempSetUser, check } from './modules/user';\nimport { HelmetProvider } from 'react-helmet-async';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(sagaMiddleware)),\n);\n\nfunction loadUser() {\n  try {\n    const user = localStorage.getItem('user');\n    if (!user) return; // 로그인 상태가 아니라면 아무것도 안함\n\n    store.dispatch(tempSetUser(user));\n    store.dispatch(check());\n  } catch (e) {\n    console.log('localStorage is not working');\n  }\n}\n\nsagaMiddleware.run(rootSaga);\nloadUser();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <HelmetProvider>\n        <App />\n      </HelmetProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n\nserviceWorker.unregister();\n"],"sourceRoot":""}